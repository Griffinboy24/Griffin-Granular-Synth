#pragma once

#include <JuceHeader.h>
#include <array>
#include <vector>
#include <cmath>
#include <algorithm>
#include <random>
#include <limits>
#include <new>

namespace project
{

#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

    // FORCE_INLINE macro for forcing inlining
#if defined(_MSC_VER)
#define FORCE_INLINE __forceinline
#else
#define FORCE_INLINE inline __attribute__((always_inline))
#endif

    using namespace juce;
    using namespace hise;
    using namespace scriptnode;

    //==============================================================================
    /** EnvelopeMode: for clarity; runtime shape chosen via function pointers. */
    enum class EnvelopeMode
    {
        Parabolic,
        Triangle,
        ASR
    };

    //==============================================================================
    /** Per-grain random parameters computed on grain activation. */
    struct GrainEssence
    {
        double pitchOffsetCents = 0.0;
        float  volumeMult = 1.0f;
        float  panning = 0.0f;
        int    gapAdjustment = 0;
        float  sizeMult = 1.0f;
        float  startOffsetInSamples = 0.0f;  // Non-wrapping offset.
    };

    //==============================================================================
    /** Parabolic Envelope State */
    struct ParabolicEnvelopeState
    {
        float amplitude = 0.0f;
        float slope = 0.0f;
        float curve = 0.0f;
        bool  finished = false;

        int   totalSamples = 0;
        int   samplesDone = 0;

        bool  isPunchy = false;
        int   segmentIndex = 0;
        int   nextBoundaryVal = 0;
        float finalAmplitude = 0.0f;

        void initNormal(float gA, int durSamples)
        {
            finished = false;
            totalSamples = durSamples;
            samplesDone = 0;
            isPunchy = false;
            segmentIndex = 0;

            if (durSamples < 1)
            {
                amplitude = 0.f;
                slope = 0.f;
                curve = 0.f;
                finished = true;
                return;
            }

            amplitude = 0.f;
            double rdur = 1.0 / double(durSamples);
            double rdur2 = rdur * rdur;
            slope = float(4.0 * gA * (rdur - rdur2));
            curve = float(-8.0 * gA * rdur2);

            nextBoundaryVal = durSamples; // only one segment
        }

        void initPunchy(float gA, int durSamples)
        {
            finished = false;
            totalSamples = durSamples;
            samplesDone = 0;
            isPunchy = true;
            segmentIndex = 0;
            finalAmplitude = gA;

            if (durSamples < 2)
            {
                amplitude = 0.f;
                slope = 0.f;
                curve = 0.f;
                finished = true;
                return;
            }
            int half = durSamples / 2;
            if (half < 1) half = 1;

            amplitude = gA;  // hold at full amplitude initially
            slope = 0.f;
            curve = 0.f;
            nextBoundaryVal = half;
        }

        int nextBoundary(int maximum) const
        {
            return std::min(maximum, nextBoundaryVal);
        }

        FORCE_INLINE float synthesize()
        {
            float current = amplitude;
            amplitude += slope;
            slope += curve;
            ++samplesDone;
            return current;
        }

        FORCE_INLINE void checkBoundary(int samplesPassed)
        {
            nextBoundaryVal -= samplesPassed;
            if (nextBoundaryVal <= 0 && !finished)
                advanceSegment();
        }

        FORCE_INLINE void advanceSegment()
        {
            if (!isPunchy)
            {
                finished = true;
                return;
            }
            // Punchy mode: 2-segment approach.
            if (segmentIndex == 0)
            {
                segmentIndex = 1;
                int half = totalSamples - (totalSamples / 2);
                if (half < 1)
                {
                    finished = true;
                    return;
                }
                float H = float(half);
                slope = -finalAmplitude / (H * H);
                curve = -(2.f * finalAmplitude) / (H * H);
                nextBoundaryVal = half;
            }
            else
            {
                finished = true;
            }
        }

        bool atEnd() const { return finished; }
    };

    //==============================================================================
    /** Triangle (linear) Envelope State */
    struct LinearEnvelopeState
    {
        float amplitude = 0.0f;
        float slope = 0.0f;
        bool  finished = false;
        bool  isPunchy = false;
        int   segmentIndex = 0;

        int   totalSamples = 0;
        int   samplesDone = 0;
        int   nextBoundaryVal = 0;
        float grainAmp = 0.0f;

        void initNormal(float gA, int durSamples)
        {
            finished = false;
            isPunchy = false;
            segmentIndex = 0;
            totalSamples = durSamples;
            samplesDone = 0;
            grainAmp = gA;

            if (durSamples < 2)
            {
                amplitude = 0.f;
                slope = 0.f;
                finished = true;
                return;
            }
            int half = durSamples / 2;
            if (half < 1) half = 1;

            amplitude = 0.f;
            slope = gA / float(half);
            nextBoundaryVal = half;
        }

        void initPunchy(float gA, int durSamples)
        {
            finished = false;
            isPunchy = true;
            segmentIndex = 0;
            totalSamples = durSamples;
            samplesDone = 0;
            grainAmp = gA;

            if (durSamples < 2)
            {
                amplitude = gA;
                slope = 0.f;
                finished = true;
                return;
            }
            int half = durSamples / 2;
            if (half < 1) half = 1;

            amplitude = gA;
            slope = 0.f;
            nextBoundaryVal = half;
        }

        int nextBoundary(int maximum) const
        {
            return std::min(maximum, nextBoundaryVal);
        }

        FORCE_INLINE float synthesize()
        {
            float current = amplitude;
            amplitude += slope;
            ++samplesDone;
            return current;
        }

        FORCE_INLINE void checkBoundary(int samplesPassed)
        {
            nextBoundaryVal -= samplesPassed;
            if (nextBoundaryVal <= 0 && !finished)
                advanceSegment();
        }

        FORCE_INLINE void advanceSegment()
        {
            if (!isPunchy)
            {
                if (segmentIndex == 0)
                {
                    segmentIndex = 1;
                    int half = totalSamples - (totalSamples / 2);
                    if (half < 1)
                    {
                        finished = true;
                        return;
                    }
                    amplitude = grainAmp;
                    slope = (0.f - grainAmp) / float(half);
                    nextBoundaryVal = half;
                }
                else
                {
                    finished = true;
                }
            }
            else
            {
                if (segmentIndex == 0)
                {
                    segmentIndex = 1;
                    int half = totalSamples - (totalSamples / 2);
                    if (half < 1)
                    {
                        finished = true;
                        return;
                    }
                    slope = (0.f - amplitude) / float(half);
                    nextBoundaryVal = half;
                }
                else
                {
                    finished = true;
                }
            }
        }

        bool atEnd() const { return finished; }
    };

    //==============================================================================
    /** ASR Envelope State */
    struct ASREnvelopeState
    {
        float amplitude = 0.0f;
        float slope = 0.0f;
        bool  finished = false;
        bool  isPunchy = false;
        int   segmentIndex = 0;

        int   totalSamples = 0;
        int   samplesDone = 0;
        int   nextBoundaryVal = 0;
        float grainAmp = 0.0f;

        float attackRatio = 3.f;
        float sustainRatio = 10.f;
        float releaseRatio = 11.f;

        void initNormal(float gA, int durSamples)
        {
            finished = false;
            isPunchy = false;
            segmentIndex = 0;
            totalSamples = durSamples;
            samplesDone = 0;
            grainAmp = gA;

            if (durSamples < 2)
            {
                amplitude = 0.f;
                slope = 0.f;
                finished = true;
                return;
            }
            int attackSamples = (int)std::round((float)durSamples
                * attackRatio / (attackRatio + sustainRatio + releaseRatio));
            if (attackSamples < 1) attackSamples = 1;

            amplitude = 0.f;
            slope = gA / (float)attackSamples;
            nextBoundaryVal = attackSamples;
        }

        void initPunchy(float gA, int durSamples)
        {
            finished = false;
            isPunchy = true;
            segmentIndex = 0;
            totalSamples = durSamples;
            samplesDone = 0;
            grainAmp = gA;

            if (durSamples < 2)
            {
                amplitude = gA;
                slope = 0.f;
                finished = true;
                return;
            }
            int attackSamples = (int)std::round((float)durSamples
                * attackRatio / (attackRatio + releaseRatio));
            if (attackSamples < 1) attackSamples = 1;

            amplitude = gA;
            slope = 0.f;
            nextBoundaryVal = attackSamples;
        }

        int nextBoundary(int maximum) const
        {
            return std::min(maximum, nextBoundaryVal);
        }

        FORCE_INLINE float synthesize()
        {
            float current = amplitude;
            amplitude += slope;
            ++samplesDone;
            return current;
        }

        FORCE_INLINE void checkBoundary(int samplesPassed)
        {
            nextBoundaryVal -= samplesPassed;
            if (nextBoundaryVal <= 0 && !finished)
                advanceSegment();
        }

        FORCE_INLINE void advanceSegment()
        {
            if (!isPunchy)
            {
                // 3-segment: Attack -> Sustain -> Release
                if (segmentIndex == 0)
                {
                    // Attack -> Sustain
                    segmentIndex = 1;
                    int sustainSamples = (int)std::round((float)totalSamples
                        * sustainRatio / (attackRatio + sustainRatio + releaseRatio));
                    if (sustainSamples < 1)
                    {
                        finished = true;
                        return;
                    }
                    amplitude = grainAmp;
                    slope = 0.f;
                    nextBoundaryVal = sustainSamples;
                }
                else if (segmentIndex == 1)
                {
                    // Sustain -> Release
                    segmentIndex = 2;
                    int releaseSamples = totalSamples -
                        (int)std::round((float)totalSamples
                            * (attackRatio + sustainRatio) / (attackRatio + sustainRatio + releaseRatio));
                    if (releaseSamples < 1)
                    {
                        finished = true;
                        return;
                    }
                    amplitude = grainAmp;
                    slope = (0.f - grainAmp) / (float)releaseSamples;
                    nextBoundaryVal = releaseSamples;
                }
                else
                {
                    finished = true;
                }
            }
            else
            {
                // Punchy = Attack -> Release
                if (segmentIndex == 0)
                {
                    segmentIndex = 1;
                    int releaseSamples = totalSamples -
                        (int)std::round((float)totalSamples
                            * attackRatio / (attackRatio + releaseRatio));
                    if (releaseSamples < 1)
                    {
                        finished = true;
                        return;
                    }
                    amplitude = grainAmp;
                    slope = (0.f - amplitude) / (float)releaseSamples;
                    nextBoundaryVal = releaseSamples;
                }
                else
                {
                    finished = true;
                }
            }
        }

        bool atEnd() const { return finished; }
    };

    //==============================================================================
    // 64-bit fixed-point accumulators for linear reading (NO WRAP).
    //==============================================================================
    static constexpr int      FIXED_SHIFT = 16;
    static constexpr uint64_t FIXED_ONE = (uint64_t)1 << FIXED_SHIFT;
    static constexpr uint64_t FIXED_MASK = FIXED_ONE - 1ULL;

    //==============================================================================
    // 1) Parabolic (No Wrap)
    //==============================================================================
    /** Template for parabolic envelope with or without Punchy mode, but now
        we do NOT do ring-buffer or bitmask wrapping. If we exceed the buffer end,
        we end the grain. */
    template <bool Punchy>
    FORCE_INLINE int vectorSynthesizeParabolicNoWrap(struct Grain& grain,
        float* outL,
        float* outR,
        int blockSize,
        int bufferLength)
    {
        auto& st = grain.parabState;
        if (st.atEnd() || !grain.active)
        {
            grain.active = false;
            return 0;
        }

        int processed = 0;
        int remaining = blockSize;

        const float leftGain = 0.5f * (1.f - grain.essence.panning);
        const float rightGain = 0.5f * (1.f + grain.essence.panning);
        const float* srcL = grain.sourceL;
        const float* srcR = grain.sourceR;

        while (remaining > 0 && !st.atEnd())
        {
            // Envelope boundary (punchy segments, etc.)
            int boundary = st.nextBoundary(remaining);

            if (boundary >= remaining)
            {
                // We'll do 'remaining' samples in the loop
                for (int i = 0; i < remaining; ++i)
                {
                    float env = st.synthesize();

                    // 64-bit shift to get integer index:
                    uint64_t acc = grain.phaseAcc >> FIXED_SHIFT;
                    int idx = (int)acc;

                    // If we've gone out of the sample range, end grain:
                    if (idx >= (bufferLength - 1))
                    {
                        st.finished = true;
                        break;
                    }

                    float frac = float(grain.phaseAcc & FIXED_MASK) / float(FIXED_ONE);

                    float sampL = srcL[idx] + frac * (srcL[idx + 1] - srcL[idx]);
                    float sampR = srcR[idx] + frac * (srcR[idx + 1] - srcR[idx]);

                    outL[processed + i] += sampL * (env * leftGain);
                    outR[processed + i] += sampR * (env * rightGain);

                    grain.phaseAcc += grain.phaseInc;
                }

                st.checkBoundary(remaining);
                processed += remaining;
                remaining = 0;
            }
            else
            {
                // We'll do 'boundary' samples in this chunk
                for (int i = 0; i < boundary; ++i)
                {
                    float env = st.synthesize();

                    uint64_t acc = grain.phaseAcc >> FIXED_SHIFT;
                    int idx = (int)acc;

                    if (idx >= (bufferLength - 1))
                    {
                        st.finished = true;
                        break;
                    }

                    float frac = float(grain.phaseAcc & FIXED_MASK) / float(FIXED_ONE);

                    float sampL = srcL[idx] + frac * (srcL[idx + 1] - srcL[idx]);
                    float sampR = srcR[idx] + frac * (srcR[idx + 1] - srcR[idx]);

                    outL[processed + i] += sampL * (env * leftGain);
                    outR[processed + i] += sampR * (env * rightGain);

                    grain.phaseAcc += grain.phaseInc;
                }

                st.checkBoundary(boundary);
                processed += boundary;
                remaining -= boundary;
            }
        }

        if (st.atEnd())
            grain.active = false;

        return processed;
    }

    // Non-templated dispatch:
    static int vectorSynthesizeParabolic(struct Grain& grain,
        float* outL,
        float* outR,
        int blockSize,
        int bufferLength)
    {
        return vectorSynthesizeParabolicNoWrap<false>(grain, outL, outR, blockSize, bufferLength);
    }
    static int vectorSynthesizePunchyParabolic(struct Grain& grain,
        float* outL,
        float* outR,
        int blockSize,
        int bufferLength)
    {
        return vectorSynthesizeParabolicNoWrap<true>(grain, outL, outR, blockSize, bufferLength);
    }

    //==============================================================================
    // 2) Triangle (No Wrap)
    //    Same concept: if we exceed bufferLength-1, we finish the grain.
    //==============================================================================
    template <bool Punchy>
    FORCE_INLINE int vectorSynthesizeTriangleNoWrap(struct Grain& grain,
        float* outL,
        float* outR,
        int blockSize,
        int bufferLength)
    {
        auto& st = grain.linearState;
        if (st.atEnd() || !grain.active)
        {
            grain.active = false;
            return 0;
        }

        int processed = 0;
        int remaining = blockSize;

        const float leftGain = 0.5f * (1.f - grain.essence.panning);
        const float rightGain = 0.5f * (1.f + grain.essence.panning);
        const float* srcL = grain.sourceL;
        const float* srcR = grain.sourceR;

        while (remaining > 0 && !st.atEnd())
        {
            int boundary = st.nextBoundary(remaining);

            if (boundary >= remaining)
            {
                for (int i = 0; i < remaining; ++i)
                {
                    float env = st.synthesize();

                    uint64_t acc = grain.phaseAcc >> FIXED_SHIFT;
                    int idx = (int)acc;

                    if (idx >= bufferLength - 1)
                    {
                        st.finished = true;
                        break;
                    }

                    float frac = float(grain.phaseAcc & FIXED_MASK) / float(FIXED_ONE);

                    float sampL = srcL[idx] + frac * (srcL[idx + 1] - srcL[idx]);
                    float sampR = srcR[idx] + frac * (srcR[idx + 1] - srcR[idx]);

                    outL[processed + i] += sampL * (env * leftGain);
                    outR[processed + i] += sampR * (env * rightGain);

                    grain.phaseAcc += grain.phaseInc;
                }
                st.checkBoundary(remaining);
                processed += remaining;
                remaining = 0;
            }
            else
            {
                for (int i = 0; i < boundary; ++i)
                {
                    float env = st.synthesize();

                    uint64_t acc = grain.phaseAcc >> FIXED_SHIFT;
                    int idx = (int)acc;

                    if (idx >= bufferLength - 1)
                    {
                        st.finished = true;
                        break;
                    }

                    float frac = float(grain.phaseAcc & FIXED_MASK) / float(FIXED_ONE);

                    float sampL = srcL[idx] + frac * (srcL[idx + 1] - srcL[idx]);
                    float sampR = srcR[idx] + frac * (srcR[idx + 1] - srcR[idx]);

                    outL[processed + i] += sampL * (env * leftGain);
                    outR[processed + i] += sampR * (env * rightGain);

                    grain.phaseAcc += grain.phaseInc;
                }
                st.checkBoundary(boundary);
                processed += boundary;
                remaining -= boundary;
            }
        }

        if (st.atEnd())
            grain.active = false;

        return processed;
    }

    // Non-templated
    static int vectorSynthesizeTriangle(struct Grain& grain,
        float* outL,
        float* outR,
        int blockSize,
        int bufferLength)
    {
        return vectorSynthesizeTriangleNoWrap<false>(grain, outL, outR, blockSize, bufferLength);
    }
    static int vectorSynthesizePunchyTriangle(struct Grain& grain,
        float* outL,
        float* outR,
        int blockSize,
        int bufferLength)
    {
        return vectorSynthesizeTriangleNoWrap<true>(grain, outL, outR, blockSize, bufferLength);
    }

    //==============================================================================
    // 3) ASR (No Wrap)
    //==============================================================================
    template <bool Punchy>
    FORCE_INLINE int vectorSynthesizeASRNoWrap(struct Grain& grain,
        float* outL,
        float* outR,
        int blockSize,
        int bufferLength)
    {
        auto& st = grain.asrState;
        if (st.atEnd() || !grain.active)
        {
            grain.active = false;
            return 0;
        }

        int processed = 0;
        int remaining = blockSize;

        const float leftGain = 0.5f * (1.f - grain.essence.panning);
        const float rightGain = 0.5f * (1.f + grain.essence.panning);
        const float* srcL = grain.sourceL;
        const float* srcR = grain.sourceR;

        while (remaining > 0 && !st.atEnd())
        {
            int boundary = st.nextBoundary(remaining);

            if (boundary >= remaining)
            {
                for (int i = 0; i < remaining; ++i)
                {
                    float env = st.synthesize();

                    uint64_t acc = grain.phaseAcc >> FIXED_SHIFT;
                    int idx = (int)acc;

                    if (idx >= bufferLength - 1)
                    {
                        st.finished = true;
                        break;
                    }

                    float frac = float(grain.phaseAcc & FIXED_MASK) / float(FIXED_ONE);

                    float sampL = srcL[idx] + frac * (srcL[idx + 1] - srcL[idx]);
                    float sampR = srcR[idx] + frac * (srcR[idx + 1] - srcR[idx]);

                    outL[processed + i] += sampL * (env * leftGain);
                    outR[processed + i] += sampR * (env * rightGain);

                    grain.phaseAcc += grain.phaseInc;
                }
                st.checkBoundary(remaining);
                processed += remaining;
                remaining = 0;
            }
            else
            {
                for (int i = 0; i < boundary; ++i)
                {
                    float env = st.synthesize();

                    uint64_t acc = grain.phaseAcc >> FIXED_SHIFT;
                    int idx = (int)acc;

                    if (idx >= bufferLength - 1)
                    {
                        st.finished = true;
                        break;
                    }

                    float frac = float(grain.phaseAcc & FIXED_MASK) / float(FIXED_ONE);

                    float sampL = srcL[idx] + frac * (srcL[idx + 1] - srcL[idx]);
                    float sampR = srcR[idx] + frac * (srcR[idx + 1] - srcR[idx]);

                    outL[processed + i] += sampL * (env * leftGain);
                    outR[processed + i] += sampR * (env * rightGain);

                    grain.phaseAcc += grain.phaseInc;
                }
                st.checkBoundary(boundary);
                processed += boundary;
                remaining -= boundary;
            }
        }

        if (st.atEnd())
            grain.active = false;

        return processed;
    }

    // Non-templated
    static int vectorSynthesizeASR(struct Grain& grain,
        float* outL,
        float* outR,
        int blockSize,
        int bufferLength)
    {
        return vectorSynthesizeASRNoWrap<false>(grain, outL, outR, blockSize, bufferLength);
    }
    static int vectorSynthesizePunchyASR(struct Grain& grain,
        float* outL,
        float* outR,
        int blockSize,
        int bufferLength)
    {
        return vectorSynthesizeASRNoWrap<true>(grain, outL, outR, blockSize, bufferLength);
    }

    //==============================================================================
    // Grain structure (with 64-bit accum, but NO bitmask).
    //==============================================================================
    struct Grain
    {
        const float* sourceL = nullptr;
        const float* sourceR = nullptr;

        double position = 0.0;  // track how many samples we've processed
        double duration = 0.0;  // total length in samples
        double delta = 0.0;  // base read increment
        double sourceReadLength = 0.0;
        bool   active = false;

        float  grainAmplitude = 1.0f;
        GrainEssence essence;
        EnvelopeMode envelopeMode = EnvelopeMode::Parabolic;

        using EnvelopeFunction = int(*)(Grain&, float*, float*, int, int);
        EnvelopeFunction envelopeRenderFn = nullptr;

        ParabolicEnvelopeState parabState;
        LinearEnvelopeState    linearState;
        ASREnvelopeState       asrState;

        // 64-bit accumulators
        uint64_t phaseAcc = 0ULL;
        uint64_t phaseInc = 0ULL;

        Grain() noexcept = default;

        Grain(double dur,
            double d,
            const std::array<const float*, 2>& src,
            float amp,
            const GrainEssence& e,
            int bufferLength,
            EnvelopeFunction fn)
        {
            duration = dur;
            delta = d;

            double centsFact = std::pow(2.0, (e.pitchOffsetCents / 1200.0));
            sourceReadLength = (d * centsFact) * dur;

            // Apply random size factor:
            duration *= e.sizeMult;
            sourceReadLength *= e.sizeMult;

            position = 0.0;
            sourceL = src[0];
            sourceR = src[1];
            grainAmplitude = amp * e.volumeMult;
            active = true;
            essence = e;
            envelopeRenderFn = fn;

            int durSamples = (int)std::lround(duration);
            if (durSamples < 1)
                durSamples = 1;

            // Envelope init
            if (fn == &vectorSynthesizeParabolic)
                parabState.initNormal(grainAmplitude, durSamples);
            else if (fn == &vectorSynthesizePunchyParabolic)
                parabState.initPunchy(grainAmplitude, durSamples);
            else if (fn == &vectorSynthesizeTriangle)
                linearState.initNormal(grainAmplitude, durSamples);
            else if (fn == &vectorSynthesizePunchyTriangle)
                linearState.initPunchy(grainAmplitude, durSamples);
            else if (fn == &vectorSynthesizeASR)
                asrState.initNormal(grainAmplitude, durSamples);
            else
                asrState.initPunchy(grainAmplitude, durSamples);

            // Compute 64-bit phaseInc
            double incD = (double)sourceReadLength * (double)FIXED_ONE / (double)durSamples;
            phaseInc = (uint64_t)std::llround(incD);

            // Initialize phaseAcc from the user offset, *no wrap*:
            float offset = e.startOffsetInSamples;
            if (offset < 0.f)
                offset = 0.f;
            else if (offset > (float)(bufferLength - 1))
                offset = (float)(bufferLength - 1);

            double offs64 = (double)offset * (double)FIXED_ONE;
            phaseAcc = (uint64_t)std::llround(offs64);
        }

        int vectorSynthesize(float* outL, float* outR, int blockSize, int bufferLength)
        {
            if (!active)
                return 0;
            return envelopeRenderFn(*this, outL, outR, blockSize, bufferLength);
        }

        bool isActive() const { return active; }
    };

    //==============================================================================
    // Scheduling
    //==============================================================================
    struct Granular_Synth_2_Helper
    {
        static void scheduleGrainNormal(
            bool& /*unusedFirstGrainFlag*/,
            std::array<Grain, 1>& /*punchyGrainPool*/,
            std::array<Grain, 20>& normalGrainPool,
            double grainDuration,
            double baseDelta,
            const std::array<const float*, 2>& sample,
            float grainAmp,
            const GrainEssence& essence,
            int bufferLen,
            int /*unusedAtt*/,
            int /*unusedRel*/,
            Grain::EnvelopeFunction normalEnvelopeFn,
            Grain::EnvelopeFunction /*punchyEnvelopeFn*/)
        {
            for (auto& g : normalGrainPool)
            {
                if (!g.isActive())
                {
                    new (&g) Grain(grainDuration, baseDelta, sample,
                        grainAmp, essence, bufferLen, normalEnvelopeFn);
                    break;
                }
            }
        }

        static void scheduleGrainPunchy(
            bool& firstGrainScheduled,
            std::array<Grain, 1>& punchyGrainPool,
            std::array<Grain, 20>& normalGrainPool,
            double grainDuration,
            double baseDelta,
            const std::array<const float*, 2>& sample,
            float grainAmp,
            const GrainEssence& essence,
            int bufferLen,
            int /*unusedAtt*/,
            int /*unusedRel*/,
            Grain::EnvelopeFunction normalEnvelopeFn,
            Grain::EnvelopeFunction punchyEnvelopeFn)
        {
            if (!firstGrainScheduled)
            {
                for (auto& g : punchyGrainPool)
                {
                    if (!g.isActive())
                    {
                        new (&g) Grain(grainDuration, baseDelta, sample,
                            grainAmp, essence, bufferLen, punchyEnvelopeFn);
                        firstGrainScheduled = true;
                        break;
                    }
                }
            }
            else
            {
                for (auto& g : normalGrainPool)
                {
                    if (!g.isActive())
                    {
                        new (&g) Grain(grainDuration, baseDelta, sample,
                            grainAmp, essence, bufferLen, normalEnvelopeFn);
                        break;
                    }
                }
            }
        }
    };

    using ScheduleGrainFunction = void(*)(bool&,
        std::array<Grain, 1>&,
        std::array<Grain, 20>&,
        double, double,
        const std::array<const float*, 2>&,
        float,
        const GrainEssence&,
        int,
        int,
        int,
        Grain::EnvelopeFunction,
        Grain::EnvelopeFunction);

    //==============================================================================
    // The main Granular_Synth class template
    //==============================================================================
    template <int NV>
    struct Granular_Synth : public data::base
    {
        SNEX_NODE(Granular_Synth);
        struct MetadataClass { SN_NODE_ID("Granular_Synth"); };

        static constexpr bool isModNode() { return false; }
        static constexpr bool isPolyphonic() { return NV > 1; }
        static constexpr bool hasTail() { return true; }
        static constexpr bool isSuspendedOnSilence() { return false; }
        static constexpr int  getFixChannelAmount() { return 2; }

        static constexpr int NumTables = 0;
        static constexpr int NumSliderPacks = 0;
        static constexpr int NumAudioFiles = 1;
        static constexpr int NumFilters = 0;
        static constexpr int NumDisplayBuffers = 0;

        std::vector<Grain*> activeGrains;

        struct Voice
        {
            int   midiNote = 60;
            bool  isActive = false;
            float velocity = 1.0f;

            std::array<Grain, 1>  punchyGrainPool;
            std::array<Grain, 20> normalGrainPool;

            int    grainSchedulerCounter = 0;
            double grainSchedulerInterval = 0.0;
            double modPhase = 0.0;
            bool   firstGrainScheduled = false;
            double scanDirection = 1.0;

            void reset(int note, float vel, int /*unusedSize*/, int intervalSamples)
            {
                midiNote = note;
                velocity = vel;
                isActive = true;

                firstGrainScheduled = false;
                for (auto& g : punchyGrainPool)  g.active = false;
                for (auto& g : normalGrainPool)  g.active = false;

                grainSchedulerCounter = 0;
                grainSchedulerInterval = (double)intervalSamples;
                modPhase = 0.0;
                scanDirection = 1.0;
            }
        };

        PolyData<Voice, NV> voices;
        ExternalData        sampleData;
        AudioBuffer<float>  sampleBuffer;
        std::array<const float*, 2> sample{ nullptr, nullptr };

        std::array<float, 128> pitchRatios{};
        double sampleRate = 44100.0;
        double sampleRateRatio = 1.0;
        int    grainSizeInSamples = 0;
        int    grainIntervalInSamples = 0;
        double globalPitchOffsetFactor = 1.0;

        float  grainStartPercent = 0.0f;
        float  grainStartOffsetInSamples = 0.0f;
        double grainPitchOffsetSemitones = 0.0;
        ModValue gate;

        std::mt19937 randomGen;

        double grainOffsetCentsRange = 10.0;
        float  grainVolumeMin = 0.8f;
        float  grainPanRange = 0.25f;
        double grainGapAdjustmentMaxSec = 0.25;
        float  grainSizeRandom = 0.0f;
        double grainSizeMS = 1000.0;
        double grainIntervalMS = 1500.0;
        float  grainSpray = 0.0f;
        float  grainSprayMode = 0.0f;
        bool   startModEnabled = false;
        double startModTimeSec = 0.0;

        int    raisedCosAttackSamples = 0;
        int    raisedCosReleaseSamples = 0;

        bool   punchyMode = false;
        int    envelopeType = 0;

        typename Grain::EnvelopeFunction normalEnvelopeFn = &vectorSynthesizeParabolic;
        typename Grain::EnvelopeFunction punchyEnvelopeFn = &vectorSynthesizePunchyParabolic;
        ScheduleGrainFunction scheduleGrainFn = nullptr;

        std::vector<float> tempBlockOutL;
        std::vector<float> tempBlockOutR;

        void setExternalData(const ExternalData& ed, int /*index*/)
        {
            sampleData = ed;
            AudioSampleBuffer tempBuf = ed.toAudioSampleBuffer();

            int numSamples = tempBuf.getNumSamples();
            int numChannels = tempBuf.getNumChannels();

            // If you want to avoid forced power-of-two resizing, simply store as is:
            if (numSamples <= 0)
            {
                // fallback
                int fallbackLen = 8;
                int chs = (numChannels > 0 ? numChannels : 2);
                AudioSampleBuffer fallback(chs, fallbackLen);
                fallback.clear();
                sampleBuffer.makeCopyOf(fallback, true);
            }
            else
            {
                // keep the wave exactly
                sampleBuffer.makeCopyOf(tempBuf, true);
            }

            sample[0] = sampleBuffer.getReadPointer(0);
            if (numChannels > 1)
                sample[1] = sampleBuffer.getReadPointer(1);
            else
                sample[1] = sample[0];

            updateDerivedParameters();
        }

        void updateDerivedParameters()
        {
            grainSizeInSamples = (int)std::lround((grainSizeMS / 1000.0) * sampleRate);
            grainIntervalInSamples = (int)std::lround((grainIntervalMS / 1000.0) * sampleRate);

            sampleRateRatio = (sampleData.sampleRate > 0 ? sampleData.sampleRate : 44100.0)
                / sampleRate;
            globalPitchOffsetFactor = std::pow(2.0, (grainPitchOffsetSemitones / 12.0));

            int currentSampleLength = sampleBuffer.getNumSamples();
            if (currentSampleLength < 1)
                currentSampleLength = 1;

            grainStartOffsetInSamples = grainStartPercent * float(currentSampleLength - 1);

            raisedCosAttackSamples = (int)std::lround(0.02 * sampleRate);
            raisedCosReleaseSamples = (int)std::lround(0.02 * sampleRate);
        }

        void updateEnvelopeFunctions()
        {
            if (envelopeType == 0)
            {
                normalEnvelopeFn = &vectorSynthesizeParabolic;
                punchyEnvelopeFn = &vectorSynthesizePunchyParabolic;
            }
            else if (envelopeType == 1)
            {
                normalEnvelopeFn = &vectorSynthesizeTriangle;
                punchyEnvelopeFn = &vectorSynthesizePunchyTriangle;
            }
            else
            {
                normalEnvelopeFn = &vectorSynthesizeASR;
                punchyEnvelopeFn = &vectorSynthesizePunchyASR;
            }
        }

        void reset()
        {
            for (auto& voice : voices)
                voice.isActive = false;
        }

        void prepare(PrepareSpecs specs)
        {
            sampleRate = specs.sampleRate;
            initPitchRatios();
            updateDerivedParameters();
            voices.prepare(specs);

            activeGrains.clear();
            activeGrains.reserve(NV * 21);

            std::random_device rd;
            randomGen.seed(rd());

            if (punchyMode)
                scheduleGrainFn = &Granular_Synth_2_Helper::scheduleGrainPunchy;
            else
                scheduleGrainFn = &Granular_Synth_2_Helper::scheduleGrainNormal;

            updateEnvelopeFunctions();
        }

        void handleHiseEvent(HiseEvent& e)
        {
            if (e.isNoteOn())
            {
                auto& voice = voices.get();
                voice.reset(e.getNoteNumber(),
                    e.getFloatVelocity(),
                    grainSizeInSamples,
                    grainIntervalInSamples);
            }
        }

        template <typename ProcessDataType>
        void process(ProcessDataType& data)
        {
            DataReadLock sl(this->sampleData);

            auto& fixData = data.template as<ProcessData<getFixChannelAmount()>>();
            auto audioBlock = fixData.toAudioBlock();
            auto* leftChannel = audioBlock.getChannelPointer(0);
            auto* rightChannel = audioBlock.getChannelPointer(1);

            int totalSamples = data.getNumSamples();
            if (sampleBuffer.getNumSamples() == 0)
            {
                audioBlock.clear();
                return;
            }

            std::fill(leftChannel, leftChannel + totalSamples, 0.f);
            std::fill(rightChannel, rightChannel + totalSamples, 0.f);

            if ((int)tempBlockOutL.size() < totalSamples)
            {
                tempBlockOutL.resize(totalSamples, 0.f);
                tempBlockOutR.resize(totalSamples, 0.f);
            }

            const int sampleLen = sampleBuffer.getNumSamples();
            int globalOffset = 0;

            while (globalOffset < totalSamples)
            {
                int nextEvent = totalSamples - globalOffset;

                // Figure out next boundary
                for (auto& voice : voices)
                {
                    if (!voice.isActive) continue;

                    nextEvent = std::min(nextEvent, voice.grainSchedulerCounter);

                    // Also see if any active grain is about to end
                    for (auto& grain : voice.normalGrainPool)
                    {
                        if (grain.active)
                        {
                            // how many left until the envelope says "done"
                            int remain = (int)(grain.duration - grain.position);
                            nextEvent = std::min(nextEvent, remain);
                        }
                    }
                    for (auto& grain : voice.punchyGrainPool)
                    {
                        if (grain.active)
                        {
                            int remain = (int)(grain.duration - grain.position);
                            nextEvent = std::min(nextEvent, remain);
                        }
                    }
                }
                if (nextEvent < 1)
                    nextEvent = 1;

                std::fill(tempBlockOutL.begin(), tempBlockOutL.begin() + nextEvent, 0.f);
                std::fill(tempBlockOutR.begin(), tempBlockOutR.begin() + nextEvent, 0.f);

                // Collect all active grains for tight loop
                activeGrains.clear();
                for (auto& voice : voices)
                {
                    if (!voice.isActive) continue;
                    for (auto& g : voice.punchyGrainPool)
                        if (g.active) activeGrains.push_back(&g);
                    for (auto& g : voice.normalGrainPool)
                        if (g.active) activeGrains.push_back(&g);
                }

                // Process each grain
                for (auto* gptr : activeGrains)
                {
                    int n = gptr->vectorSynthesize(tempBlockOutL.data(),
                        tempBlockOutR.data(),
                        nextEvent,
                        sampleLen);
                    gptr->position += n;
                }

                // Sum into output
                for (int i = 0; i < nextEvent; ++i)
                {
                    leftChannel[globalOffset + i] += tempBlockOutL[i];
                    rightChannel[globalOffset + i] += tempBlockOutR[i];
                }

                // Schedule new grains if needed
                for (auto& voice : voices)
                {
                    if (!voice.isActive) continue;

                    voice.grainSchedulerCounter -= nextEvent;
                    while (voice.grainSchedulerCounter <= 0)
                    {
                        // Base pitch ratio from MIDI note
                        double baseDelta = pitchRatios[voice.midiNote] *
                            sampleRateRatio *
                            globalPitchOffsetFactor;

                        double grainDuration = (double)grainSizeInSamples;

                        GrainEssence essence;
                        {
                            // random pitch
                            std::uniform_real_distribution<double> pitchDist(-grainOffsetCentsRange, grainOffsetCentsRange);
                            essence.pitchOffsetCents = pitchDist(randomGen);

                            // random volume
                            std::uniform_real_distribution<float> volDist(grainVolumeMin, 1.f);
                            essence.volumeMult = volDist(randomGen);

                            // random pan
                            std::uniform_real_distribution<float> panDist(-grainPanRange, grainPanRange);
                            essence.panning = panDist(randomGen);

                            // random gap
                            std::uniform_int_distribution<int> gapDist(0, (int)std::lround(grainGapAdjustmentMaxSec * sampleRate));
                            essence.gapAdjustment = gapDist(randomGen);

                            // random size
                            std::uniform_real_distribution<float> sizeDist((1.f - grainSizeRandom), 1.f);
                            essence.sizeMult = sizeDist(randomGen);

                            // user offset logic
                            float finalStartOffset = grainStartOffsetInSamples;

                            // optional scanning
                            if (startModEnabled && startModTimeSec > 0.00001)
                            {
                                int samplesPassed = grainIntervalInSamples + essence.gapAdjustment;
                                double timeSec = (double)samplesPassed / sampleRate;
                                double cycleTime = startModTimeSec;
                                double increment = timeSec / cycleTime;

                                voice.modPhase += increment * voice.scanDirection;
                                if (voice.modPhase >= 1.0)
                                {
                                    voice.modPhase = 2.0 - voice.modPhase;
                                    voice.scanDirection = -1.0;
                                }
                                else if (voice.modPhase <= 0.0)
                                {
                                    voice.modPhase = -voice.modPhase;
                                    voice.scanDirection = 1.0;
                                }
                                float curPercent = (float)voice.modPhase;
                                finalStartOffset = curPercent * float(sampleLen - 1);
                            }

                            // random "spray"
                            if (grainSpray > 0.f)
                            {
                                std::uniform_real_distribution<float> rdist(0.f, 1.f);
                                float rnd = rdist(randomGen);
                                float left = -grainSprayMode * grainSpray * float(sampleLen);
                                float range = grainSpray * (1.f + grainSprayMode) * float(sampleLen);
                                float offset = left + rnd * range;
                                finalStartOffset += offset;
                            }

                            // no wrap, so we clamp out-of-bounds or let the grain read near the end
                            if (finalStartOffset < 0.f)
                                finalStartOffset = 0.f;

                            essence.startOffsetInSamples = finalStartOffset;
                        }

                        float grainAmp = voice.velocity;

                        // Schedule
                        scheduleGrainFn(
                            voice.firstGrainScheduled,
                            voice.punchyGrainPool,
                            voice.normalGrainPool,
                            grainDuration,
                            baseDelta,
                            sample,
                            grainAmp,
                            essence,
                            sampleLen,
                            raisedCosAttackSamples,
                            raisedCosReleaseSamples,
                            normalEnvelopeFn,
                            punchyEnvelopeFn
                        );

                        voice.grainSchedulerCounter += (grainIntervalInSamples + essence.gapAdjustment);
                    }
                }

                globalOffset += nextEvent;
            }
        }

        template <typename FrameDataType>
        void processFrame(FrameDataType& /*data*/)
        {
            // Not used
        }

        template <int P>
        void setParameter(double v)
        {
            // same as your code
            if constexpr (P == 0)
            {
                grainPitchOffsetSemitones = v;
                updateDerivedParameters();
            }
            else if constexpr (P == 1)
            {
                grainOffsetCentsRange = v;
            }
            else if constexpr (P == 2)
            {
                grainVolumeMin = 1.f - (float)v;
            }
            else if constexpr (P == 3)
            {
                grainPanRange = (float)v;
            }
            else if constexpr (P == 4)
            {
                grainGapAdjustmentMaxSec = v;
            }
            else if constexpr (P == 5)
            {
                grainSizeMS = v;
                updateDerivedParameters();
            }
            else if constexpr (P == 6)
            {
                grainIntervalMS = v;
                updateDerivedParameters();
            }
            else if constexpr (P == 7)
            {
                grainSizeRandom = (float)v;
            }
            else if constexpr (P == 8)
            {
                grainStartPercent = (float)v;
                updateDerivedParameters();
            }
            else if constexpr (P == 9)
            {
                startModTimeSec = v;
            }
            else if constexpr (P == 10)
            {
                startModEnabled = (v >= 0.5);
            }
            else if constexpr (P == 11)
            {
                grainSpray = (float)v;
            }
            else if constexpr (P == 12)
            {
                grainSprayMode = (v >= 0.5) ? 1.f : 0.f;
            }
            else if constexpr (P == 13)
            {
                bool oldPunchy = punchyMode;
                punchyMode = (v >= 0.5);
                if (oldPunchy != punchyMode)
                {
                    if (punchyMode)
                        scheduleGrainFn = &Granular_Synth_2_Helper::scheduleGrainPunchy;
                    else
                        scheduleGrainFn = &Granular_Synth_2_Helper::scheduleGrainNormal;
                }
            }
            else if constexpr (P == 14)
            {
                envelopeType = (int)std::round(v * 2.0f);
                updateEnvelopeFunctions();
            }
        }

        void createParameters(ParameterDataList& data)
        {
            // same approach, etc.
            {
                parameter::data pitchOffsetParam("Pitch (semitones)", { -24.0,24.0,0.01 });
                registerCallback<0>(pitchOffsetParam);
                pitchOffsetParam.setDefaultValue(0.0);
                data.add(std::move(pitchOffsetParam));
            }
            {
                parameter::data offsetParam("Rand Pitch Detune", { 0.0,100.0,0.1 });
                registerCallback<1>(offsetParam);
                offsetParam.setDefaultValue(0.0);
                data.add(std::move(offsetParam));
            }
            {
                parameter::data volMinParam("Rand Vol", { 0.0,0.8,0.01 });
                registerCallback<2>(volMinParam);
                volMinParam.setDefaultValue(0.0);
                data.add(std::move(volMinParam));
            }
            {
                parameter::data panParam("Rand Pan", { 0.0,1.0,0.01 });
                registerCallback<3>(panParam);
                panParam.setDefaultValue(0.0);
                data.add(std::move(panParam));
            }
            {
                parameter::data gapParam("Rand Interval (sec)", { 0.0,1.0,0.01 });
                registerCallback<4>(gapParam);
                gapParam.setDefaultValue(0.0);
                data.add(std::move(gapParam));
            }
            {
                parameter::data sizeParam("Grain Size (ms)", { 10.0,2000.0,1.0 });
                registerCallback<5>(sizeParam);
                sizeParam.setDefaultValue(1000.0);
                data.add(std::move(sizeParam));
            }
            {
                parameter::data intervalParam("Grain Interval (ms)", { 10.0,3000.0,1.0 });
                registerCallback<6>(intervalParam);
                intervalParam.setDefaultValue(1500.0);
                data.add(std::move(intervalParam));
            }
            {
                parameter::data sizeRandomParam("Rand Size", { 0.0,0.8,0.01 });
                registerCallback<7>(sizeRandomParam);
                sizeRandomParam.setDefaultValue(0.0);
                data.add(std::move(sizeRandomParam));
            }
            {
                parameter::data startParam("Playhead Position", { 0.0,1.0,0.001 });
                registerCallback<8>(startParam);
                startParam.setDefaultValue(0.0);
                data.add(std::move(startParam));
            }
            {
                parameter::data startModTime("Scan Time (sec)", { 0.0,20.0,0.001 });
                registerCallback<9>(startModTime);
                startModTime.setDefaultValue(0.0);
                data.add(std::move(startModTime));
            }
            {
                parameter::data startModEnable("Scan Enable", { 0.0,1.0,1.0 });
                registerCallback<10>(startModEnable);
                startModEnable.setDefaultValue(0.0);
                data.add(std::move(startModEnable));
            }
            {
                parameter::data sprayParam("Spray", { 0.0,1.0,0.01 });
                registerCallback<11>(sprayParam);
                sprayParam.setDefaultValue(0.0);
                data.add(std::move(sprayParam));
            }
            {
                parameter::data sprayModeParam("Spray Mode", { 0.0,1.0,1.0 });
                registerCallback<12>(sprayModeParam);
                sprayModeParam.setDefaultValue(0.0);
                data.add(std::move(sprayModeParam));
            }
            {
                parameter::data punchyParam("Punchy Mode", { 0.0,1.0,1.0 });
                registerCallback<13>(punchyParam);
                punchyParam.setDefaultValue(0.0);
                data.add(std::move(punchyParam));
            }
            {
                parameter::data envTypeParam("Envelope Type", { 0.0,1.0,0.5f });
                registerCallback<14>(envTypeParam);
                envTypeParam.setDefaultValue(0.0);
                data.add(std::move(envTypeParam));
            }
        }

        void initPitchRatios()
        {
            for (int i = 0; i < 128; ++i)
            {
                pitchRatios[i] = std::pow(2.0f, float(i - 60) / 12.0f);
            }
        }
    };

} // namespace project
