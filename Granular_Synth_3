#pragma once

#include <JuceHeader.h>
#include <array>
#include <vector>
#include <cmath>
#include <algorithm>
#include <random>
#include <limits>
#include <new>  // for placement-new

namespace project
{

#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

    using namespace juce;
    using namespace hise;
    using namespace scriptnode;

    //==============================================================================
    // EnvelopeMode: (for clarity; runtime shape is chosen via function pointers)
    //==============================================================================
    enum class EnvelopeMode
    {
        Parabolic,
        Triangle,
        ASR // (Punchy is treated as a modifier)
    };

    //==============================================================================
    // GrainEssence: Randomized per-grain parameters computed on activation.
    //==============================================================================
    struct GrainEssence
    {
        double pitchOffsetCents = 0.0;
        float  volumeMult = 1.0f;
        float  panning = 0.0f;
        int    gapAdjustment = 0;
        float  sizeMult = 1.0f;
        float  startOffsetInSamples = 0.0f;
    };

    //==============================================================================
    // Envelope state structs with boundary hoisting and explicit segment handling,
    // as described in the paper.
    //==============================================================================

    //---------------------------------------------------------------
    // Parabolic envelope state
    //---------------------------------------------------------------
    struct ParabolicEnvelopeState
    {
        float amplitude = 0.0f;
        float slope = 0.0f;
        float curve = 0.0f;
        bool finished = false;
        int totalSamples = 0;
        int samplesDone = 0;
        bool isPunchy = false;
        int segmentIndex = 0;
        int nextBoundaryVal = 0;  // number of samples until the next boundary condition
        float finalAmplitude = 0.0f;  // used in punchy mode

        void initNormal(float gA, int durSamples)
        {
            finished = false;
            totalSamples = durSamples;
            samplesDone = 0;
            isPunchy = false;
            segmentIndex = 0;
            if (durSamples < 1)
            {
                amplitude = 0.0f; slope = 0.0f; curve = 0.0f;
                finished = true;
                return;
            }
            amplitude = 0.0f;
            double rdur = 1.0 / double(durSamples);
            double rdur2 = rdur * rdur;
            slope = float(4.0 * double(gA) * (rdur - rdur2));
            curve = float(-8.0 * double(gA) * rdur2);
            nextBoundaryVal = durSamples; // one segment covers the entire envelope
        }

        void initPunchy(float gA, int durSamples)
        {
            finished = false;
            totalSamples = durSamples;
            samplesDone = 0;
            isPunchy = true;
            segmentIndex = 0;
            finalAmplitude = gA;
            if (durSamples < 2)
            {
                amplitude = 0.0f; slope = 0.0f; curve = 0.0f;
                finished = true;
                return;
            }
            int half = durSamples / 2;
            if (half < 1) half = 1;
            amplitude = gA; // hold full amplitude in the first segment
            slope = 0.0f;
            curve = 0.0f;
            nextBoundaryVal = half;
        }

        // Returns the lesser of maximum and our nextBoundaryVal.
        int nextBoundary(int maximum) const
        {
            return std::min(maximum, nextBoundaryVal);
        }

        // Compute one envelope sample and update state without checking boundaries.
        float synthesize()
        {
            float current = amplitude;
            amplitude += slope;
            slope += curve;
            ++samplesDone;
            return current;
        }

        // Subtract the samples processed and, if needed, perform a state transition.
        void checkBoundary(int samplesPassed)
        {
            nextBoundaryVal -= samplesPassed;
            if (nextBoundaryVal <= 0 && !finished)
                advanceSegment();
        }

        bool atEnd() const { return finished; }

        inline void advanceSegment()
        {
            if (!isPunchy)
            {
                finished = true;
                return;
            }
            if (segmentIndex == 0)
            {
                segmentIndex = 1;
                int half = totalSamples - (totalSamples / 2);
                if (half < 1)
                {
                    finished = true;
                    return;
                }
                const float H = (float)half;
                slope = -finalAmplitude / (H * H);
                curve = -(2.0f * finalAmplitude) / (H * H);
                nextBoundaryVal = half;
            }
            else
            {
                finished = true;
            }
        }
    };

    //---------------------------------------------------------------
    // Linear (Triangle) envelope state
    //---------------------------------------------------------------
    struct LinearEnvelopeState
    {
        float amplitude = 0.0f;
        float slope = 0.0f;
        bool finished = false;
        bool isPunchy = false;
        int segmentIndex = 0;
        int totalSamples = 0;
        int samplesDone = 0;
        int nextBoundaryVal = 0;
        float grainAmp = 0.0f;

        void initNormal(float gA, int durSamples)
        {
            finished = false;
            isPunchy = false;
            segmentIndex = 0;
            totalSamples = durSamples;
            samplesDone = 0;
            grainAmp = gA;
            if (durSamples < 2)
            {
                amplitude = 0.f; slope = 0.f;
                finished = true;
                return;
            }
            int half = durSamples / 2;
            if (half < 1)
                half = 1;
            amplitude = 0.f;
            slope = gA / (float)half;
            nextBoundaryVal = half;
        }

        void initPunchy(float gA, int durSamples)
        {
            finished = false;
            isPunchy = true;
            segmentIndex = 0;
            totalSamples = durSamples;
            samplesDone = 0;
            grainAmp = gA;
            if (durSamples < 2)
            {
                amplitude = 0.f; slope = 0.f;
                finished = true;
                return;
            }
            int half = durSamples / 2;
            if (half < 1)
                half = 1;
            amplitude = gA;
            slope = 0.f;
            nextBoundaryVal = half;
        }

        int nextBoundary(int maximum) const
        {
            return std::min(maximum, nextBoundaryVal);
        }

        float synthesize()
        {
            float current = amplitude;
            amplitude += slope;
            ++samplesDone;
            return current;
        }

        void checkBoundary(int samplesPassed)
        {
            nextBoundaryVal -= samplesPassed;
            if (nextBoundaryVal <= 0 && !finished)
                advanceSegment();
        }

        bool atEnd() const { return finished; }

        inline void advanceSegment()
        {
            if (!isPunchy)
            {
                if (segmentIndex == 0)
                {
                    segmentIndex = 1;
                    int half = totalSamples - (totalSamples / 2);
                    if (half < 1)
                    {
                        finished = true;
                        return;
                    }
                    amplitude = grainAmp;
                    slope = (0.f - grainAmp) / (float)half;
                    nextBoundaryVal = half;
                }
                else
                {
                    finished = true;
                }
            }
            else
            {
                if (segmentIndex == 0)
                {
                    segmentIndex = 1;
                    int half = totalSamples - (totalSamples / 2);
                    if (half < 1)
                    {
                        finished = true;
                        return;
                    }
                    slope = (0.f - amplitude) / (float)half;
                    nextBoundaryVal = half;
                }
                else
                {
                    finished = true;
                }
            }
        }
    };

    //---------------------------------------------------------------
    // ASR envelope state
    //---------------------------------------------------------------
    struct ASREnvelopeState
    {
        float amplitude = 0.0f;
        float slope = 0.0f;
        bool finished = false;
        bool isPunchy = false;
        int segmentIndex = 0;
        int totalSamples = 0;
        int samplesDone = 0;
        int nextBoundaryVal = 0;
        float grainAmp = 0.0f;
        float attackRatio = 3.f;
        float sustainRatio = 10.f;
        float releaseRatio = 11.f;

        void initNormal(float gA, int durSamples)
        {
            finished = false;
            isPunchy = false;
            segmentIndex = 0;
            totalSamples = durSamples;
            samplesDone = 0;
            grainAmp = gA;
            if (durSamples < 2)
            {
                amplitude = 0.f; slope = 0.f;
                finished = true;
                return;
            }
            int attackSamples = (int)std::round((float)durSamples * attackRatio / (attackRatio + sustainRatio + releaseRatio));
            if (attackSamples < 1)
                attackSamples = 1;
            amplitude = 0.f;
            slope = gA / (float)attackSamples;
            nextBoundaryVal = attackSamples;
        }

        void initPunchy(float gA, int durSamples)
        {
            finished = false;
            isPunchy = true;
            segmentIndex = 0;
            totalSamples = durSamples;
            samplesDone = 0;
            grainAmp = gA;
            if (durSamples < 2)
            {
                amplitude = 0.f; slope = 0.f;
                finished = true;
                return;
            }
            int attackSamples = (int)std::round((float)durSamples * attackRatio / (attackRatio + releaseRatio));
            if (attackSamples < 1)
                attackSamples = 1;
            amplitude = gA;
            slope = 0.f;
            nextBoundaryVal = attackSamples;
        }

        int nextBoundary(int maximum) const
        {
            return std::min(maximum, nextBoundaryVal);
        }

        float synthesize()
        {
            float current = amplitude;
            amplitude += slope;
            ++samplesDone;
            return current;
        }

        void checkBoundary(int samplesPassed)
        {
            nextBoundaryVal -= samplesPassed;
            if (nextBoundaryVal <= 0 && !finished)
                advanceSegment();
        }

        bool atEnd() const { return finished; }

        inline void advanceSegment()
        {
            if (!isPunchy)
            {
                if (segmentIndex == 0) // Attack -> Sustain
                {
                    segmentIndex = 1;
                    int sustainSamples = (int)std::round((float)totalSamples * sustainRatio / (attackRatio + sustainRatio + releaseRatio));
                    if (sustainSamples < 1)
                    {
                        finished = true;
                        return;
                    }
                    amplitude = grainAmp;
                    slope = 0.f;
                    nextBoundaryVal = sustainSamples;
                }
                else if (segmentIndex == 1) // Sustain -> Release
                {
                    segmentIndex = 2;
                    int releaseSamples = totalSamples - (int)std::round((float)totalSamples * (attackRatio + sustainRatio) / (attackRatio + sustainRatio + releaseRatio));
                    if (releaseSamples < 1)
                    {
                        finished = true;
                        return;
                    }
                    amplitude = grainAmp;
                    slope = (0.f - grainAmp) / (float)releaseSamples;
                    nextBoundaryVal = releaseSamples;
                }
                else
                {
                    finished = true;
                }
            }
            else
            {
                if (segmentIndex == 0) // Attack -> Release
                {
                    segmentIndex = 1;
                    int releaseSamples = totalSamples - (int)std::round((float)totalSamples * attackRatio / (attackRatio + releaseRatio));
                    if (releaseSamples < 1)
                    {
                        finished = true;
                        return;
                    }
                    amplitude = grainAmp;
                    slope = (0.f - amplitude) / (float)releaseSamples;
                    nextBoundaryVal = releaseSamples;
                }
                else
                {
                    finished = true;
                }
            }
        }
    };

    //==============================================================================
    // Templated Envelope Rendering Functions following the paper exactly.
    // These functions synthesize a block of samples without per-sample boundary checks,
    // then perform a single boundary check after the block.
    //==============================================================================

    template <bool Punchy>
    inline int vectorSynthesizeParabolicTemplated(struct Grain& grain,
        float* outL, float* outR, int blockSize, int bufferLength)
    {
        auto& st = grain.parabState;
        if (st.atEnd() || !grain.active)
        {
            grain.active = false;
            return 0;
        }
        int processed = 0;
        int remaining = blockSize;
        while (remaining > 0 && !st.atEnd())
        {
            int boundary = st.nextBoundary(remaining);
            for (int i = 0; i < boundary; ++i)
            {
                float env = st.synthesize();
                float x = (st.totalSamples > 1 ? (float)st.samplesDone / st.totalSamples : 0.f);
                float effPos = x * (float)grain.sourceReadLength + grain.essence.startOffsetInSamples;
                float sampleL = 0.f, sampleR = 0.f;
                int idx0 = (int)effPos;
                if (effPos >= 0.f && idx0 < bufferLength)
                {
                    int idx1 = (idx0 + 1 < bufferLength ? idx0 + 1 : bufferLength - 1);
                    float frac = effPos - (float)idx0;
                    sampleL = grain.sourceL[idx0] + frac * (grain.sourceL[idx1] - grain.sourceL[idx0]);
                    sampleR = grain.sourceR[idx0] + frac * (grain.sourceR[idx1] - grain.sourceR[idx0]);
                }
                outL[processed + i] += sampleL * (env * (0.5f * (1.0f - grain.essence.panning)));
                outR[processed + i] += sampleR * (env * (0.5f * (1.0f + grain.essence.panning)));
            }
            processed += boundary;
            remaining -= boundary;
            st.checkBoundary(boundary);
        }
        if (st.atEnd())
            grain.active = false;
        return processed;
    }

    template <bool Punchy>
    inline int vectorSynthesizeTriangleTemplated(struct Grain& grain,
        float* outL, float* outR, int blockSize, int bufferLength)
    {
        auto& st = grain.linearState;
        if (st.atEnd() || !grain.active)
        {
            grain.active = false;
            return 0;
        }
        int processed = 0;
        int remaining = blockSize;
        while (remaining > 0 && !st.atEnd())
        {
            int boundary = st.nextBoundary(remaining);
            for (int i = 0; i < boundary; ++i)
            {
                float env = st.synthesize();
                float x = (st.totalSamples > 1 ? (float)st.samplesDone / st.totalSamples : 0.f);
                float effPos = x * (float)grain.sourceReadLength + grain.essence.startOffsetInSamples;
                float sampleL = 0.f, sampleR = 0.f;
                int idx0 = (int)effPos;
                if (effPos >= 0.f && idx0 < bufferLength)
                {
                    int idx1 = (idx0 + 1 < bufferLength ? idx0 + 1 : bufferLength - 1);
                    float frac = effPos - (float)idx0;
                    sampleL = grain.sourceL[idx0] + frac * (grain.sourceL[idx1] - grain.sourceL[idx0]);
                    sampleR = grain.sourceR[idx0] + frac * (grain.sourceR[idx1] - grain.sourceR[idx0]);
                }
                outL[processed + i] += sampleL * (env * (0.5f * (1.0f - grain.essence.panning)));
                outR[processed + i] += sampleR * (env * (0.5f * (1.0f + grain.essence.panning)));
            }
            processed += boundary;
            remaining -= boundary;
            st.checkBoundary(boundary);
        }
        if (st.atEnd())
            grain.active = false;
        return processed;
    }

    template <bool Punchy>
    inline int vectorSynthesizeASRTemplated(struct Grain& grain,
        float* outL, float* outR, int blockSize, int bufferLength)
    {
        auto& st = grain.asrState;
        if (st.atEnd() || !grain.active)
        {
            grain.active = false;
            return 0;
        }
        int processed = 0;
        int remaining = blockSize;
        while (remaining > 0 && !st.atEnd())
        {
            int boundary = st.nextBoundary(remaining);
            for (int i = 0; i < boundary; ++i)
            {
                float env = st.synthesize();
                float x = (st.totalSamples > 1 ? (float)st.samplesDone / st.totalSamples : 0.f);
                float effPos = x * (float)grain.sourceReadLength + grain.essence.startOffsetInSamples;
                float sampleL = 0.f, sampleR = 0.f;
                int idx0 = (int)effPos;
                if (effPos >= 0.f && idx0 < bufferLength)
                {
                    int idx1 = (idx0 + 1 < bufferLength ? idx0 + 1 : bufferLength - 1);
                    float frac = effPos - (float)idx0;
                    sampleL = grain.sourceL[idx0] + frac * (grain.sourceL[idx1] - grain.sourceL[idx0]);
                    sampleR = grain.sourceR[idx0] + frac * (grain.sourceR[idx1] - grain.sourceR[idx0]);
                }
                outL[processed + i] += sampleL * (env * (0.5f * (1.0f - grain.essence.panning)));
                outR[processed + i] += sampleR * (env * (0.5f * (1.0f + grain.essence.panning)));
            }
            processed += boundary;
            remaining -= boundary;
            st.checkBoundary(boundary);
        }
        if (st.atEnd())
            grain.active = false;
        return processed;
    }

    //==============================================================================
    // Non-templated wrappers for runtime dispatch
    //==============================================================================
    static int vectorSynthesizeParabolic(struct Grain& grain,
        float* outL, float* outR, int blockSize, int bufferLength)
    {
        return vectorSynthesizeParabolicTemplated<false>(grain, outL, outR, blockSize, bufferLength);
    }

    static int vectorSynthesizePunchyParabolic(struct Grain& grain,
        float* outL, float* outR, int blockSize, int bufferLength)
    {
        return vectorSynthesizeParabolicTemplated<true>(grain, outL, outR, blockSize, bufferLength);
    }

    static int vectorSynthesizeTriangle(struct Grain& grain,
        float* outL, float* outR, int blockSize, int bufferLength)
    {
        return vectorSynthesizeTriangleTemplated<false>(grain, outL, outR, blockSize, bufferLength);
    }

    static int vectorSynthesizePunchyTriangle(struct Grain& grain,
        float* outL, float* outR, int blockSize, int bufferLength)
    {
        return vectorSynthesizeTriangleTemplated<true>(grain, outL, outR, blockSize, bufferLength);
    }

    static int vectorSynthesizeASR(struct Grain& grain,
        float* outL, float* outR, int blockSize, int bufferLength)
    {
        return vectorSynthesizeASRTemplated<false>(grain, outL, outR, blockSize, bufferLength);
    }

    static int vectorSynthesizePunchyASR(struct Grain& grain,
        float* outL, float* outR, int blockSize, int bufferLength)
    {
        return vectorSynthesizeASRTemplated<true>(grain, outL, outR, blockSize, bufferLength);
    }

    //==============================================================================
    // Grain structure with placement-new based activation.
    // The default constructor is provided for fixed pool construction.
    //==============================================================================
    struct Grain
    {
        const float* sourceL = nullptr;
        const float* sourceR = nullptr;
        double position = 0.0;    // samples processed so far
        double duration = 0.0;    // total length in samples
        double delta = 0.0;       // pitch read increment
        double sourceReadLength = 0.0;
        bool active = false;
        float grainAmplitude = 1.0f;
        GrainEssence essence;
        EnvelopeMode envelopeMode = EnvelopeMode::Parabolic;
        using EnvelopeFunction = int(*)(Grain&, float*, float*, int, int);
        EnvelopeFunction envelopeRenderFn = nullptr;
        ParabolicEnvelopeState  parabState;
        LinearEnvelopeState     linearState;
        ASREnvelopeState        asrState;

        // Default constructor (required for fixed pool construction)
        Grain() noexcept
            : sourceL(nullptr), sourceR(nullptr), position(0.0), duration(0.0),
            delta(0.0), sourceReadLength(0.0), active(false), grainAmplitude(1.0f),
            essence(), envelopeMode(EnvelopeMode::Parabolic), envelopeRenderFn(nullptr),
            parabState(), linearState(), asrState()
        {
        }

        // Constructor for in-place activation (via placement-new)
        Grain(double dur, double d, const std::array<const float*, 2>& src,
            float amp, const GrainEssence& e, int bufferLength, EnvelopeFunction fn)
        {
            duration = dur;
            delta = d;
            double centsFact = std::pow(2.0, e.pitchOffsetCents / 1200.0);
            sourceReadLength = (d * centsFact) * dur;
            duration *= e.sizeMult;
            sourceReadLength *= e.sizeMult;
            position = 0.0;
            sourceL = src[0];
            sourceR = src[1];
            grainAmplitude = amp * e.volumeMult;
            active = true;
            essence = e;
            envelopeRenderFn = fn;
            int durSamples = (int)std::lround(duration);
            if (durSamples < 1)
                durSamples = 1;
            if (fn == &vectorSynthesizeParabolic)
                parabState.initNormal(grainAmplitude, durSamples);
            else if (fn == &vectorSynthesizePunchyParabolic)
                parabState.initPunchy(grainAmplitude, durSamples);
            else if (fn == &vectorSynthesizeTriangle)
                linearState.initNormal(grainAmplitude, durSamples);
            else if (fn == &vectorSynthesizePunchyTriangle)
                linearState.initPunchy(grainAmplitude, durSamples);
            else if (fn == &vectorSynthesizeASR)
                asrState.initNormal(grainAmplitude, durSamples);
            else // punchy ASR
                asrState.initPunchy(grainAmplitude, durSamples);
        }

        // Synthesis call.
        int vectorSynthesize(float* outL, float* outR, int blockSize, int bufferLength)
        {
            if (!active)
                return 0;
            return envelopeRenderFn(*this, outL, outR, blockSize, bufferLength);
        }

        bool isActive() const { return active; }
    };

    //==============================================================================
    // Scheduling Functions using placement-new on fixed pools.
    //==============================================================================
    struct Granular_Synth_2_Helper
    {
        static void scheduleGrainNormal(
            bool& /*unusedFirstGrainFlag*/,
            std::array<Grain, 1>& /*punchyGrainPool*/,
            std::array<Grain, 11>& normalGrainPool,
            double grainDuration,
            double baseDelta,
            const std::array<const float*, 2>& sample,
            float grainAmp,
            const GrainEssence& essence,
            int bufferLen,
            int /*unusedAtt*/,
            int /*unusedRel*/,
            Grain::EnvelopeFunction normalEnvelopeFn,
            Grain::EnvelopeFunction /*punchyEnvelopeFn*/)
        {
            for (auto& g : normalGrainPool)
            {
                if (!g.isActive())
                {
                    new (&g) Grain(grainDuration, baseDelta, sample, grainAmp, essence, bufferLen, normalEnvelopeFn);
                    break;
                }
            }
        }

        static void scheduleGrainPunchy(
            bool& firstGrainScheduled,
            std::array<Grain, 1>& punchyGrainPool,
            std::array<Grain, 11>& normalGrainPool,
            double grainDuration,
            double baseDelta,
            const std::array<const float*, 2>& sample,
            float grainAmp,
            const GrainEssence& essence,
            int bufferLen,
            int /*unusedAtt*/,
            int /*unusedRel*/,
            Grain::EnvelopeFunction normalEnvelopeFn,
            Grain::EnvelopeFunction punchyEnvelopeFn)
        {
            if (!firstGrainScheduled)
            {
                for (auto& g : punchyGrainPool)
                {
                    if (!g.isActive())
                    {
                        new (&g) Grain(grainDuration, baseDelta, sample, grainAmp, essence, bufferLen, punchyEnvelopeFn);
                        firstGrainScheduled = true;
                        break;
                    }
                }
            }
            else
            {
                for (auto& g : normalGrainPool)
                {
                    if (!g.isActive())
                    {
                        new (&g) Grain(grainDuration, baseDelta, sample, grainAmp, essence, bufferLen, normalEnvelopeFn);
                        break;
                    }
                }
            }
        }
    };

    using ScheduleGrainFunction = void(*)(bool&,
        std::array<Grain, 1>&,
        std::array<Grain, 11>&,
        double, double,
        const std::array<const float*, 2>&,
        float,
        const GrainEssence&,
        int,
        int,
        int,
        Grain::EnvelopeFunction,
        Grain::EnvelopeFunction);

    //==============================================================================
    // Granular_Synth Class Template (SNEX node – unchanged)
    //==============================================================================
    template <int NV>
    struct Granular_Synth : public data::base
    {
        SNEX_NODE(Granular_Synth);
        struct MetadataClass { SN_NODE_ID("Granular_Synth"); };

        static constexpr bool isModNode() { return false; }
        static constexpr bool isPolyphonic() { return NV > 1; }
        static constexpr bool hasTail() { return true; }
        static constexpr bool isSuspendedOnSilence() { return false; }
        static constexpr int getFixChannelAmount() { return 2; }

        static constexpr int NumTables = 0;
        static constexpr int NumSliderPacks = 0;
        static constexpr int NumAudioFiles = 1;
        static constexpr int NumFilters = 0;
        static constexpr int NumDisplayBuffers = 0;

        struct Voice
        {
            int midiNote = 60;
            bool isActive = false;
            float velocity = 1.0f;
            std::array<Grain, 1> punchyGrainPool;
            std::array<Grain, 11> normalGrainPool;
            int grainSchedulerCounter = 0;
            double grainSchedulerInterval = 0.0;
            double modPhase = 0.0;
            bool firstGrainScheduled = false;
            double scanDirection = 1.0;

            void reset(int note, float vel, int /*grainSizeSamples*/, int grainIntervalSamples)
            {
                midiNote = note;
                velocity = vel;
                isActive = true;
                firstGrainScheduled = false;
                for (auto& gr : punchyGrainPool)
                    gr.active = false;
                for (auto& gr : normalGrainPool)
                    gr.active = false;
                grainSchedulerCounter = 0;
                grainSchedulerInterval = (double)grainIntervalSamples;
                modPhase = 0.0;
                scanDirection = 1.0;
            }
        };

        PolyData<Voice, NV> voices;
        ExternalData sampleData;
        AudioBuffer<float> sampleBuffer;
        std::array<const float*, 2> sample{ nullptr, nullptr };
        std::array<float, 128> pitchRatios{};
        double sampleRate = 44100.0;
        double sampleRateRatio = 1.0;
        int grainSizeInSamples = 0;
        int grainIntervalInSamples = 0;
        double globalPitchOffsetFactor = 1.0;
        float grainStartPercent = 0.0f;
        float grainStartOffsetInSamples = 0.0f;
        double grainPitchOffsetSemitones = 0.0;
        ModValue gate;
        std::mt19937 randomGen;
        double grainOffsetCentsRange = 10.0;
        float grainVolumeMin = 0.8f;
        float grainPanRange = 0.25f;
        double grainGapAdjustmentMaxSec = 0.25;
        float grainSizeRandom = 0.0f;
        double grainSizeMS = 1000.0;
        double grainIntervalMS = 1500.0;
        float grainSpray = 0.0f;
        float grainSprayMode = 0.0f;
        bool startModEnabled = false;
        double startModTimeSec = 0.0;
        int raisedCosAttackSamples = 0;
        int raisedCosReleaseSamples = 0;
        bool punchyMode = false;
        int envelopeType = 0;
        typename Grain::EnvelopeFunction normalEnvelopeFn = &vectorSynthesizeParabolic;
        typename Grain::EnvelopeFunction punchyEnvelopeFn = &vectorSynthesizePunchyParabolic;
        ScheduleGrainFunction scheduleGrainFn = nullptr;
        std::vector<float> tempBlockOutL;
        std::vector<float> tempBlockOutR;

        inline static float reflectOffset(float offset, float bufferLen)
        {
            const float doubleLen = 2.0f * bufferLen;
            if (offset > -doubleLen && offset < doubleLen)
            {
                if (offset < 0.0f)
                    offset += doubleLen;
            }
            else
            {
                offset = std::fmod(offset, doubleLen);
                if (offset < 0.0f)
                    offset += doubleLen;
            }
            if (offset > bufferLen)
                offset = doubleLen - offset;
            return offset;
        }

        void prepare(PrepareSpecs specs)
        {
            sampleRate = specs.sampleRate;
            initPitchRatios();
            updateDerivedParameters();
            voices.prepare(specs);
            std::random_device rd;
            randomGen.seed(rd());
            if (punchyMode)
                scheduleGrainFn = &Granular_Synth_2_Helper::scheduleGrainPunchy;
            else
                scheduleGrainFn = &Granular_Synth_2_Helper::scheduleGrainNormal;
            updateEnvelopeFunctions();
        }

        void updateDerivedParameters()
        {
            grainSizeInSamples = (int)std::lround((grainSizeMS / 1000.0) * sampleRate);
            grainIntervalInSamples = (int)std::lround((grainIntervalMS / 1000.0) * sampleRate);
            sampleRateRatio = (sampleData.sampleRate > 0 ? sampleData.sampleRate : 44100.0) / sampleRate;
            globalPitchOffsetFactor = std::pow(2.0, grainPitchOffsetSemitones / 12.0);
            int currentSampleLength = sampleBuffer.getNumSamples();
            if (currentSampleLength < 1)
                currentSampleLength = 1;
            grainStartOffsetInSamples = grainStartPercent * (float)(currentSampleLength - 1);
            raisedCosAttackSamples = (int)std::lround(0.02 * sampleRate);
            raisedCosReleaseSamples = (int)std::lround(0.02 * sampleRate);
        }

        void updateEnvelopeFunctions()
        {
            if (envelopeType == 0)
            {
                normalEnvelopeFn = &vectorSynthesizeParabolic;
                punchyEnvelopeFn = &vectorSynthesizePunchyParabolic;
            }
            else if (envelopeType == 1)
            {
                normalEnvelopeFn = &vectorSynthesizeTriangle;
                punchyEnvelopeFn = &vectorSynthesizePunchyTriangle;
            }
            else // ASR
            {
                normalEnvelopeFn = &vectorSynthesizeASR;
                punchyEnvelopeFn = &vectorSynthesizePunchyASR;
            }
        }

        void reset()
        {
            for (auto& voice : voices)
                voice.isActive = false;
        }

        void setExternalData(const ExternalData& ed, int /*index*/)
        {
            sampleData = ed;
            AudioSampleBuffer tempBuffer = ed.toAudioSampleBuffer();
            int numSamples = tempBuffer.getNumSamples();
            int numChannels = tempBuffer.getNumChannels();
            if (numSamples <= 0)
            {
                static AudioBuffer<float> safetyBuffer(2, 4);
                safetyBuffer.clear();
                sampleBuffer.makeCopyOf(safetyBuffer, true);
            }
            else
            {
                sampleBuffer.makeCopyOf(tempBuffer, true);
            }
            sample[0] = sampleBuffer.getReadPointer(0);
            if (numChannels > 1)
                sample[1] = sampleBuffer.getReadPointer(1);
            else
                sample[1] = sample[0];
            updateDerivedParameters();
        }

        void handleHiseEvent(HiseEvent& e)
        {
            if (e.isNoteOn())
            {
                auto& voice = voices.get();
                voice.reset(e.getNoteNumber(), e.getFloatVelocity(), grainSizeInSamples, grainIntervalInSamples);
            }
        }

        // Process function with interleaved grain activation and synthesis.
        template <typename ProcessDataType>
        void process(ProcessDataType& data)
        {
            DataReadLock sl(this->sampleData);
            auto& fixData = data.template as<ProcessData<getFixChannelAmount()>>();
            auto audioBlock = fixData.toAudioBlock();
            auto* leftChannel = audioBlock.getChannelPointer(0);
            auto* rightChannel = audioBlock.getChannelPointer(1);
            int totalSamples = data.getNumSamples();
            if (sampleBuffer.getNumSamples() == 0)
            {
                audioBlock.clear();
                return;
            }
            std::fill(leftChannel, leftChannel + totalSamples, 0.0f);
            std::fill(rightChannel, rightChannel + totalSamples, 0.0f);
            if (tempBlockOutL.size() < (size_t)totalSamples)
            {
                tempBlockOutL.resize(totalSamples, 0.f);
                tempBlockOutR.resize(totalSamples, 0.f);
            }
            const int sampleLen = sampleBuffer.getNumSamples();
            int globalOffset = 0;
            while (globalOffset < totalSamples)
            {
                int nextEvent = totalSamples - globalOffset;
                for (auto& voice : voices)
                {
                    if (!voice.isActive)
                        continue;
                    nextEvent = std::min(nextEvent, voice.grainSchedulerCounter);
                    for (auto& grain : voice.normalGrainPool)
                    {
                        if (grain.isActive())
                        {
                            int rem = (int)(grain.duration - grain.position);
                            nextEvent = std::min(nextEvent, rem);
                        }
                    }
                    for (auto& grain : voice.punchyGrainPool)
                    {
                        if (grain.isActive())
                        {
                            int rem = (int)(grain.duration - grain.position);
                            nextEvent = std::min(nextEvent, rem);
                        }
                    }
                }
                if (nextEvent < 1)
                    nextEvent = 1;
                std::fill(tempBlockOutL.begin(), tempBlockOutL.begin() + nextEvent, 0.f);
                std::fill(tempBlockOutR.begin(), tempBlockOutR.begin() + nextEvent, 0.f);
                for (auto& voice : voices)
                {
                    if (!voice.isActive)
                        continue;
                    for (auto& grain : voice.punchyGrainPool)
                    {
                        if (grain.isActive())
                        {
                            int n = grain.vectorSynthesize(tempBlockOutL.data(), tempBlockOutR.data(), nextEvent, sampleLen);
                            grain.position += n;
                        }
                    }
                    for (auto& grain : voice.normalGrainPool)
                    {
                        if (grain.isActive())
                        {
                            int n = grain.vectorSynthesize(tempBlockOutL.data(), tempBlockOutR.data(), nextEvent, sampleLen);
                            grain.position += n;
                        }
                    }
                }
                for (int i = 0; i < nextEvent; ++i)
                {
                    leftChannel[globalOffset + i] += tempBlockOutL[i];
                    rightChannel[globalOffset + i] += tempBlockOutR[i];
                }
                for (auto& voice : voices)
                {
                    if (!voice.isActive)
                        continue;
                    voice.grainSchedulerCounter -= nextEvent;
                    while (voice.grainSchedulerCounter <= 0)
                    {
                        double baseDelta = pitchRatios[voice.midiNote] * sampleRateRatio * globalPitchOffsetFactor;
                        double grainDuration = (double)grainSizeInSamples;
                        GrainEssence essence;
                        {
                            std::uniform_real_distribution<double> pitchOffDist(-grainOffsetCentsRange, grainOffsetCentsRange);
                            essence.pitchOffsetCents = pitchOffDist(randomGen);
                            std::uniform_real_distribution<float> volDist(grainVolumeMin, 1.0f);
                            essence.volumeMult = volDist(randomGen);
                            std::uniform_real_distribution<float> panDist(-grainPanRange, grainPanRange);
                            essence.panning = panDist(randomGen);
                            std::uniform_int_distribution<int> gapDist(0, (int)std::lround(grainGapAdjustmentMaxSec * sampleRate));
                            essence.gapAdjustment = gapDist(randomGen);
                            std::uniform_real_distribution<float> sizeDist(1.0f - grainSizeRandom, 1.0f);
                            essence.sizeMult = sizeDist(randomGen);
                            float finalStartOffset = grainStartOffsetInSamples;
                            if (startModEnabled && startModTimeSec > 0.00001)
                            {
                                int samplesPassed = grainIntervalInSamples + essence.gapAdjustment;
                                double timeSec = (double)samplesPassed / sampleRate;
                                double cycleTime = startModTimeSec;
                                double increment = timeSec / cycleTime;
                                voice.modPhase += increment * voice.scanDirection;
                                if (voice.modPhase >= 1.0)
                                {
                                    voice.modPhase = 2.0 - voice.modPhase;
                                    voice.scanDirection = -1.0;
                                }
                                else if (voice.modPhase <= 0.0)
                                {
                                    voice.modPhase = -voice.modPhase;
                                    voice.scanDirection = 1.0;
                                }
                                float curPercent = (float)voice.modPhase;
                                finalStartOffset = curPercent * (float)(sampleLen - 1);
                            }
                            if (grainSpray > 0.0f)
                            {
                                std::uniform_real_distribution<float> sprayDist(0.0f, 1.0f);
                                float rnd = sprayDist(randomGen);
                                float left = -grainSprayMode * grainSpray * (float)sampleLen;
                                float range = grainSpray * (1.0f + grainSprayMode) * (float)sampleLen;
                                float offset = left + rnd * range;
                                finalStartOffset += offset;
                            }
                            if (grainSprayMode >= 0.5f)
                            {
                                finalStartOffset = reflectOffset(finalStartOffset, (float)sampleLen);
                            }
                            else
                            {
                                if (finalStartOffset < 0.f)
                                    finalStartOffset = 0.f;
                            }
                            essence.startOffsetInSamples = finalStartOffset;
                        }
                        float grainAmp = voice.velocity;
                        scheduleGrainFn(
                            voice.firstGrainScheduled,
                            voice.punchyGrainPool,
                            voice.normalGrainPool,
                            grainDuration,
                            baseDelta,
                            sample,
                            grainAmp,
                            essence,
                            sampleLen,
                            raisedCosAttackSamples,
                            raisedCosReleaseSamples,
                            normalEnvelopeFn,
                            punchyEnvelopeFn
                        );
                        voice.grainSchedulerCounter += (grainIntervalInSamples + essence.gapAdjustment);
                    }
                }
                globalOffset += nextEvent;
            }
        }

        template <typename FrameDataType>
        void processFrame(FrameDataType&/*data*/)
        {
            // Not used.
        }

        template <int P>
        void setParameter(double v)
        {
            if constexpr (P == 0)
            {
                grainPitchOffsetSemitones = v;
                updateDerivedParameters();
            }
            else if constexpr (P == 1)
            {
                grainOffsetCentsRange = v;
            }
            else if constexpr (P == 2)
            {
                grainVolumeMin = 1.0f - (float)v;
            }
            else if constexpr (P == 3)
            {
                grainPanRange = (float)v;
            }
            else if constexpr (P == 4)
            {
                grainGapAdjustmentMaxSec = v;
            }
            else if constexpr (P == 5)
            {
                grainSizeMS = v;
                updateDerivedParameters();
            }
            else if constexpr (P == 6)
            {
                grainIntervalMS = v;
                updateDerivedParameters();
            }
            else if constexpr (P == 7)
            {
                grainSizeRandom = (float)v;
            }
            else if constexpr (P == 8)
            {
                grainStartPercent = (float)v;
                updateDerivedParameters();
            }
            else if constexpr (P == 9)
            {
                startModTimeSec = v;
            }
            else if constexpr (P == 10)
            {
                startModEnabled = (v >= 0.5);
            }
            else if constexpr (P == 11)
            {
                grainSpray = (float)v;
            }
            else if constexpr (P == 12)
            {
                grainSprayMode = (v >= 0.5f) ? 1.0f : 0.0f;
            }
            else if constexpr (P == 13)
            {
                bool oldPunchyMode = punchyMode;
                punchyMode = (v >= 0.5);
                if (oldPunchyMode != punchyMode)
                {
                    if (punchyMode)
                        scheduleGrainFn = &Granular_Synth_2_Helper::scheduleGrainPunchy;
                    else
                        scheduleGrainFn = &Granular_Synth_2_Helper::scheduleGrainNormal;
                }
            }
            else if constexpr (P == 14)
            {
                envelopeType = (int)std::round(v * 2.0f);
                updateEnvelopeFunctions();
            }
        }

        void createParameters(ParameterDataList& data)
        {
            {
                parameter::data pitchOffsetParam("Pitch (semitones)", { -24.0, 24.0, 0.01 });
                registerCallback<0>(pitchOffsetParam);
                pitchOffsetParam.setDefaultValue(0.0);
                data.add(std::move(pitchOffsetParam));
            }
            {
                parameter::data offsetParam("Rand Pitch Detune", { 0.0, 100.0, 0.1 });
                registerCallback<1>(offsetParam);
                offsetParam.setDefaultValue(0.0);
                data.add(std::move(offsetParam));
            }
            {
                parameter::data volMinParam("Rand Vol", { 0.0, 0.8, 0.01 });
                registerCallback<2>(volMinParam);
                volMinParam.setDefaultValue(0.0);
                data.add(std::move(volMinParam));
            }
            {
                parameter::data panParam("Rand Pan", { 0.0, 1.0, 0.01 });
                registerCallback<3>(panParam);
                panParam.setDefaultValue(0.0);
                data.add(std::move(panParam));
            }
            {
                parameter::data gapParam("Rand Interval (sec)", { 0.0, 1.0, 0.01 });
                registerCallback<4>(gapParam);
                gapParam.setDefaultValue(0.0);
                data.add(std::move(gapParam));
            }
            {
                parameter::data sizeParam("Grain Size (ms)", { 10.0, 2000.0, 1.0 });
                registerCallback<5>(sizeParam);
                sizeParam.setDefaultValue(1000.0);
                data.add(std::move(sizeParam));
            }
            {
                parameter::data intervalParam("Grain Interval (ms)", { 10.0, 3000.0, 1.0 });
                registerCallback<6>(intervalParam);
                intervalParam.setDefaultValue(1500.0);
                data.add(std::move(intervalParam));
            }
            {
                parameter::data sizeRandomParam("Rand Size", { 0.0, 0.8, 0.01 });
                registerCallback<7>(sizeRandomParam);
                sizeRandomParam.setDefaultValue(0.0);
                data.add(std::move(sizeRandomParam));
            }
            {
                parameter::data startParam("Playhead Position", { 0.0, 1.0, 0.001 });
                registerCallback<8>(startParam);
                startParam.setDefaultValue(0.0);
                data.add(std::move(startParam));
            }
            {
                parameter::data startModTime("Scan Time (sec)", { 0.0, 20.0, 0.001 });
                registerCallback<9>(startModTime);
                startModTime.setDefaultValue(0.0);
                data.add(std::move(startModTime));
            }
            {
                parameter::data startModEnable("Scan Enable", { 0.0, 1.0, 1.0 });
                registerCallback<10>(startModEnable);
                startModEnable.setDefaultValue(0.0);
                data.add(std::move(startModEnable));
            }
            {
                parameter::data sprayParam("Spray", { 0.0, 1.0, 0.01 });
                registerCallback<11>(sprayParam);
                sprayParam.setDefaultValue(0.0);
                data.add(std::move(sprayParam));
            }
            {
                parameter::data sprayModeParam("Spray Mode", { 0.0, 1.0, 1.0 });
                registerCallback<12>(sprayModeParam);
                sprayModeParam.setDefaultValue(0.0);
                data.add(std::move(sprayModeParam));
            }
            {
                parameter::data punchyParam("Punchy Mode", { 0.0, 1.0, 1.0 });
                registerCallback<13>(punchyParam);
                punchyParam.setDefaultValue(0.0);
                data.add(std::move(punchyParam));
            }
            {
                parameter::data envTypeParam("Envelope Type", { 0.0, 1.0, 0.5f });
                registerCallback<14>(envTypeParam);
                envTypeParam.setDefaultValue(0.0);
                data.add(std::move(envTypeParam));
            }
        }

        void initPitchRatios()
        {
            for (int i = 0; i < 128; ++i)
                pitchRatios[i] = std::pow(2.0f, (float)(i - 60) / 12.0f);
        }
    };

} // namespace project
