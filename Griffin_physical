#pragma once
#include <JuceHeader.h>

#include <array>
#include <cmath>

#include "src\resonator.h" // Include relative to project structure

namespace project
{

#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

    using namespace juce;
    using namespace hise;
    using namespace scriptnode;

    namespace FunctionsClasses {

        // Implement functions and classes here

    }

    template <int NV>
    struct Griffin_Physical : public data::base
    {
        SNEX_NODE(Griffin_Physical);

        struct MetadataClass
        {
            SN_NODE_ID("Griffin_Physical");
        };

        // Needed by compiler
        void handleHiseEvent(HiseEvent& e)
        {
        }
        template <typename FrameDataType>
        void processFrame(FrameDataType&) {}

        static constexpr bool isModNode() { return false; }
        static constexpr bool isPolyphonic() { return false; }
        static constexpr bool hasTail() { return true; }
        static constexpr bool isSuspendedOnSilence() { return false; }
        static constexpr int getFixChannelAmount() { return 2; }

        static constexpr int NumTables = 0;
        static constexpr int NumSliderPacks = 0;
        static constexpr int NumAudioFiles = 0;
        static constexpr int NumFilters = 0;
        static constexpr int NumDisplayBuffers = 0;

        class AudioEffect
        {
        public:
            AudioEffect()
            {
            }

            void prepare(double sampleRate)
            {
                voice.resA.setParams(sampleRate, true, project::Models::Beam, 64, 0.5, 0.5, 0.0, 0.5, 0.5, 0.1, 20000.0, 0.1, 0.0, 0.0, 0.0);
            }

            void process(float* samples, int numSamples)
            {
                for (int i = 0; i < numSamples; ++i)
                {
                    samples[i] = voice.resA.process(samples[i]);
                }
            }

            void updateParams(float fundamentalFreq, float ratio, float decay, float damp)
            {
                voice.resA.decay = decay;
                voice.resA.damp = damp;

                // Ensure parameters are propagated
                voice.resA.setParams(voice.resA.srate, true, project::Models::Beam, 64, decay, damp, 0.0, 0.0, 0.0, 0.0, 20000.0, 0.1, 0.0, 0.0, 0.0);

                project::Voice::recalcBeam(true, ratio);
                voice.resA.update(fundamentalFreq, 1.0, false, project::Voice::aModels[project::Models::Beam]);
            }

        private:
            project::Voice voice;
        };

        void prepare(PrepareSpecs specs)
        {
            float sampleRate = specs.sampleRate;
            float numChannels = specs.numChannels;

            leftChannelEffect.prepare(sampleRate);
            rightChannelEffect.prepare(sampleRate);
        }

        void reset() {}

        template <typename ProcessDataType>
        void process(ProcessDataType& data)
        {
            auto& fixData = data.template as<ProcessData<getFixChannelAmount()>>();
            auto audioBlock = fixData.toAudioBlock();

            auto* leftChannelData = audioBlock.getChannelPointer(0);
            auto* rightChannelData = audioBlock.getChannelPointer(1);

            float blockSize = data.getNumSamples();

            leftChannelEffect.process(leftChannelData, blockSize);
            rightChannelEffect.process(rightChannelData, blockSize);
        }

        template <int P>
        void setParameter(double v)
        {
            if (P == 0) {
                fundamentalFreqParam = static_cast<float>(v);
            }
            else if (P == 1) {
                ratioParam = static_cast<float>(v);
            }
            else if (P == 2) {
                decayParam = static_cast<float>(v);
            }
            else if (P == 3) {
                dampParam = static_cast<float>(v);
            }

            leftChannelEffect.updateParams(fundamentalFreqParam, ratioParam, decayParam, dampParam);
            rightChannelEffect.updateParams(fundamentalFreqParam, ratioParam, decayParam, dampParam);
        }

        void createParameters(ParameterDataList& data)
        {
            parameter::data p("Fundamental Freq", { 20.0, 10000.0, 0.1 });
            registerCallback<0>(p);
            p.setDefaultValue(500.0);
            data.add(std::move(p));

            parameter::data p2("Ratio", { 0.1, 2.0, 0.01 });
            registerCallback<1>(p2);
            p2.setDefaultValue(1.0);
            data.add(std::move(p2));

            parameter::data p3("Decay", { 0.01, 2.5, 0.01 });
            registerCallback<2>(p3);
            p3.setDefaultValue(1.5);
            data.add(std::move(p3));

            parameter::data p4("Damping", { 0.0, 1.0, 0.01 });
            registerCallback<3>(p4);
            p4.setDefaultValue(0.6);
            data.add(std::move(p4));
        }

    private:
        AudioEffect leftChannelEffect;
        AudioEffect rightChannelEffect;
        float fundamentalFreqParam = 200.0f;
        float ratioParam = 1.0f;
        float decayParam = 0.5f;
        float dampParam = 0.5f;
    };
}
