#pragma once
#include <JuceHeader.h>
#include <array>
#include <cmath>
#include <algorithm>
#include <vector>
#include <tuple>
#include <utility>

//------------------------------------------------------------------------------
// Helper: make_array
// Deduces the size of a std::array from its initializer list (pre-C++20).
//------------------------------------------------------------------------------
template <typename T, typename... Ts>
constexpr std::array<typename std::common_type<T, Ts...>::type, 1 + sizeof...(Ts)>
make_array(T t, Ts... ts) {
    return { t, ts... };
}

namespace project {

    //==============================================================================
    // Configuration for the Reverb Network
    //==============================================================================
    // Define your reverb here 

    struct GriffinReverbConfig {
        // LFO speeds (in Hz)
        inline static constexpr auto lfoFrequencies = make_array(1.5f);

        // Each stage is defined by its parameters.
        // The maximum delay is computed automatically as baseDelay + 50.
        struct Stage {
            float baseDelay;
            float coefficient;
            float depth;
            size_t lfoIndex;
            constexpr float maxDelay() const { return baseDelay + 50.f; }
        };

        // List your stages here. 
        inline static constexpr auto stages = make_array(
            Stage{ 10.f, 0.5f, 0.3f, 0 }

        );
    };

    //==============================================================================
    // Simple LFO Class
    //==============================================================================
    class SimpleLFO {
    public:
        SimpleLFO() : frequency(1.f), phase(0.f), sampleRate(44100.f), increment(0.f) {}
        SimpleLFO(float freq) : frequency(freq), phase(0.f), sampleRate(44100.f), increment(0.f) {}

        void prepare(float sr) {
            sampleRate = sr;
            phase = 0.f;
            increment = frequency / sampleRate;
        }
        float update() {
            phase += increment;
            if (phase >= 1.f)
                phase -= 1.f;
            return parSin(phase);
        }
    private:
        float frequency;
        float phase;
        float sampleRate;
        float increment;
        inline float parSin(float ph) const {
            float shifted = 0.5f - ph;
            return shifted * (8.f - 16.f * std::fabs(shifted));
        }
    };

    //==============================================================================
    // Simple Allpass Delay Line Class
    //==============================================================================
    class SimpleAllpass {
    public:
        // Default constructor
        SimpleAllpass()
            : baseDelayMs(0.f), maxDelayMs(50.f), coefficient(0.f), depth(0.f), lfoIndex(0),
            sampleRate(44100.f), smoothedDelay(0.f), smoothedCoeff(0.f), writeIndex(0),
            factorDelay(0.f), powerBufferSize(0), indexMask(0)
        {
        }
        // Parameterized constructor.
        SimpleAllpass(float baseDelay, float coeff, float d, size_t lfoIdx)
            : baseDelayMs(baseDelay), coefficient(coeff), depth(d), lfoIndex(lfoIdx),
            sampleRate(44100.f), writeIndex(0)
        {
            maxDelayMs = baseDelayMs + 50.f;
            smoothedDelay = baseDelayMs;
            smoothedCoeff = coefficient;
        }

        void prepare(float sr) {
            sampleRate = sr;
            smoothedDelay = baseDelayMs;
            smoothedCoeff = coefficient;
            writeIndex = 0;
            factorDelay = sampleRate / 1000.f;
            int reqSize = static_cast<int>(std::ceil(maxDelayMs * factorDelay)) + 4;
            powerBufferSize = nextPow2(reqSize);
            indexMask = powerBufferSize - 1;
            delayBuffer.assign(powerBufferSize, 0.f);
        }
        void reset() {
            std::fill(delayBuffer.begin(), delayBuffer.end(), 0.f);
            writeIndex = 0;
            smoothedDelay = baseDelayMs;
            smoothedCoeff = coefficient;
        }
        float processSample(float x, float lfoValue) {
            float targetCoeff = coefficient + depth * lfoValue;
            targetCoeff = std::clamp(targetCoeff, -0.99f, 0.99f);
            constexpr float smoothingFactor = 0.01f;
            float oneMinusSmooth = 1.f - smoothingFactor;
            smoothedCoeff = oneMinusSmooth * smoothedCoeff + smoothingFactor * targetCoeff;
            smoothedDelay = oneMinusSmooth * smoothedDelay + smoothingFactor * baseDelayMs;

            float D = smoothedDelay * factorDelay;
            int d_int = static_cast<int>(D);
            float d_frac = D - static_cast<float>(d_int);
            bool hasFraction = (d_frac > 0.f);
            int offset = hasFraction ? 1 : 0;
            int index0 = (writeIndex - d_int - offset) & indexMask;
            float frac = hasFraction ? (1.f - d_frac) : 0.f;
            int index1 = (index0 + 1) & indexMask;
            float delayedV = (1.f - frac) * delayBuffer[index0] + frac * delayBuffer[index1];

            float v = x - smoothedCoeff * delayedV;
            float y = smoothedCoeff * v + delayedV;

            delayBuffer[writeIndex] = v;
            writeIndex = (writeIndex + 1) & indexMask;
            return y;
        }
        size_t getLfoIndex() const { return lfoIndex; }
    private:
        static int nextPow2(int x) {
            x--;
            x |= x >> 1;
            x |= x >> 2;
            x |= x >> 4;
            x |= x >> 8;
            x |= x >> 16;
            return x + 1;
        }
        float baseDelayMs;
        float maxDelayMs;
        float coefficient;
        float depth;
        size_t lfoIndex;
        float sampleRate;
        float smoothedDelay;
        float smoothedCoeff;
        std::vector<float> delayBuffer;
        int writeIndex;
        float factorDelay;
        int powerBufferSize;
        int indexMask;
    };

    //==============================================================================
    // ModularReverb: Builds the reverb chain from the configuration.
    //==============================================================================
    // The number of LFOs and stages is deduced automatically from the sizes of the constexpr arrays.
    template <typename Config>
    class ModularReverb {
    public:
        static constexpr size_t numLFOs = std::tuple_size<decltype(Config::lfoFrequencies)>::value;
        static constexpr size_t numStages = std::tuple_size<decltype(Config::stages)>::value;

        ModularReverb()
            : lfos(), aps()
        {
            // Allocate fixed-size arrays for LFOs and stages.
            lfos.resize(numLFOs);
            aps.resize(numStages);
            // Initialize LFOs from the configuration.
            for (size_t i = 0; i < numLFOs; ++i)
                lfos[i] = SimpleLFO(Config::lfoFrequencies[i]);
            // Initialize allpass stages from the configuration.
            for (size_t i = 0; i < numStages; ++i) {
                const auto& s = Config::stages[i];
                aps[i] = SimpleAllpass(s.baseDelay, s.coefficient, s.depth, s.lfoIndex);
            }
        }

        void prepare(float sr) {
            for (auto& lfo : lfos)
                lfo.prepare(sr);
            for (auto& ap : aps)
                ap.prepare(sr);
        }
        void reset() {
            for (auto& ap : aps)
                ap.reset();
        }
        float processSample(float x) {
            std::array<float, numLFOs> lfoValues;
            for (size_t i = 0; i < numLFOs; ++i)
                lfoValues[i] = lfos[i].update();
            float output = x;
            for (size_t i = 0; i < numStages; ++i) {
                size_t idx = aps[i].getLfoIndex();
                if (idx >= numLFOs)
                    idx = 0;
                output = aps[i].processSample(output, lfoValues[idx]);
            }
            return output;
        }
    private:
        std::vector<SimpleLFO> lfos;
        std::vector<SimpleAllpass> aps;
    };

    //==============================================================================
    // Griffin_Reverb Node Definition
    //==============================================================================
    // This node class remains part of your framework. Do not change the SNEX macros.
    template <int NV>
    struct Griffin_Reverb : public data::base {
        SNEX_NODE(Griffin_Reverb);

        struct MetadataClass { SN_NODE_ID("Griffin_Reverb"); };

        static constexpr bool isModNode() { return false; }
        static constexpr bool isPolyphonic() { return NV > 1; }
        static constexpr bool hasTail() { return false; }
        static constexpr bool isSuspendedOnSilence() { return false; }
        static constexpr int getFixChannelAmount() { return 2; }

        static constexpr int NumTables = 0;
        static constexpr int NumSliderPacks = 0;
        static constexpr int NumAudioFiles = 0;
        static constexpr int NumFilters = 0;
        static constexpr int NumDisplayBuffers = 0;

        // AudioReverb: A wrapper that connects the reverb chain to the node.
        class AudioReverb {
        public:
            AudioReverb() : sampleRate(44100.f), reverb() {} // Default construct ModularReverb
            void prepare(double sr) {
                sampleRate = sr;
                reverb.prepare(static_cast<float>(sampleRate));
            }
            inline float processSample(float x) { return reverb.processSample(x); }
            inline void process(float* samples, int numSamples) {
                for (int i = 0; i < numSamples; ++i)
                    samples[i] = reverb.processSample(samples[i]);
            }
            void reset() { reverb.reset(); }
        private:
            double sampleRate;
            // Use our central configuration (GriffinReverbConfig).
            ModularReverb<GriffinReverbConfig> reverb;
        };

        AudioReverb monoReverb;
        std::vector<float> monoBuffer;

        void prepare(PrepareSpecs specs) {
            float sampleRate = specs.sampleRate;
            monoReverb.prepare(sampleRate);
            monoBuffer.resize(static_cast<size_t>(specs.blockSize));
        }
        void reset() { monoReverb.reset(); }
        template <typename ProcessDataType>
        void process(ProcessDataType& data) {
            auto& fixData = data.template as<ProcessData<getFixChannelAmount()>>();
            auto audioBlock = fixData.toAudioBlock();
            auto* leftChannelData = audioBlock.getChannelPointer(0);
            auto* rightChannelData = audioBlock.getChannelPointer(1);
            int blockSize = data.getNumSamples();
            FloatVectorOperations::copy(monoBuffer.data(), leftChannelData, blockSize);
            FloatVectorOperations::add(monoBuffer.data(), rightChannelData, blockSize);
            FloatVectorOperations::multiply(monoBuffer.data(), 0.5f, blockSize);
            for (int i = 0; i < blockSize; ++i)
                monoBuffer[i] = monoReverb.processSample(monoBuffer[i]);
            FloatVectorOperations::copy(leftChannelData, monoBuffer.data(), blockSize);
            FloatVectorOperations::copy(rightChannelData, monoBuffer.data(), blockSize);
        }
        void createParameters(ParameterDataList& data) {}
        void handleHiseEvent(HiseEvent& e) {}
        template <typename FrameDataType>
        void processFrame(FrameDataType& data) {}
    };

} // namespace project
