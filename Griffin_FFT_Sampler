#pragma once
#include <JuceHeader.h>
#include <array>
#include <vector>
#include <cmath>
#include <algorithm>
#include <future>
#include "src/GriffinFFT_HQ.h"
#include "src/GriffinFFT_LQ.h"

/*
    Griffin_FFT_Sampler
    -------------------
    This node uses GriffinFFT_HQ to process external sample data
    with an FFT-based effect. It loads sample data from an
    external file (external data), then uses GriffinFFT_HQ to process the buffer. To create your own
    spectral effect, modify the processSpectrum() method in GriffinFFT_HQ.

    Key points:
      • prepare(): initializes the sampler and FFT instance.
      • setExternalData(): loads sample data and sets the FFT sample rate.
      • processSampleBufferWithFFT(): calls the FFT processing on the entire file.
*/

namespace project
{
    using namespace juce;
    using namespace hise;
    using namespace scriptnode;

    template <int NV>
    struct Griffin_FFT_Sampler : public data::base
    {
        SNEX_NODE(Griffin_FFT_Sampler);

        struct MetadataClass { SN_NODE_ID("Griffin_FFT_Sampler"); };

        static constexpr bool isModNode() { return false; }
        static constexpr bool isPolyphonic() { return NV > 1; }
        static constexpr bool hasTail() { return false; }
        static constexpr bool isSuspendedOnSilence() { return false; }
        static constexpr int getFixChannelAmount() { return 2; }

        static constexpr int NumTables = 0;
        static constexpr int NumSliderPacks = 0;
        static constexpr int NumAudioFiles = 1;
        static constexpr int NumFilters = 0;
        static constexpr int NumDisplayBuffers = 0;

        // Voice data
        struct Voice
        {
            int   midiNote = 60;
            bool  isActive = false;
            float velocity = 1.0f;
            double position = 0.0;
            double delta = 1.0;

            void reset(int note, float vel, double startPos, double readDelta)
            {
                midiNote = note;
                velocity = vel;
                position = startPos;
                delta = readDelta;
                isActive = true;
            }
        };

        PolyData<Voice, NV> voices;
        ExternalData        sampleData;
        AudioBuffer<float>  sampleBuffer;
        std::array<const float*, 2> sample{ nullptr, nullptr };

        std::array<float, 128> pitchRatios{};
        double sampleRate = 44100.0;
        double sampleRateRatio = 1.0;

        // Create a persistent FFT processor (from GriffinFFT.h)
        GriffinFFT_HQ fftHqInstance;

        // --- prepare()
        // Initializes the sampler and sets the FFT instance sample rate.
        void prepare(PrepareSpecs specs)
        {
            sampleRate = specs.sampleRate;
            initPitchRatios();
            voices.prepare(specs);
            fftHqInstance.reset();
            fftHqInstance.setSampleRate(static_cast<float>(sampleRate));
            fftHqInstance.setLowpassCutoff(5000.0f);
        }

        // --- updateDerivedParameters()
        // Updates the sample rate ratio based on file data.
        void updateDerivedParameters()
        {
            sampleRateRatio = (sampleData.sampleRate > 0 ? sampleData.sampleRate : 44100.0) / sampleRate;
        }

        // --- setExternalData()
        // Loads the sample file and sets the FFT sample rate accordingly.
        void setExternalData(const ExternalData& ed, int /*index*/)
        {
            sampleData = ed;
            AudioSampleBuffer tempBuffer = ed.toAudioSampleBuffer();
            int numSamples = tempBuffer.getNumSamples();
            int numChannels = tempBuffer.getNumChannels();

            if (numSamples <= 0)
            {
                static AudioBuffer<float> safetyBuffer(2, 4);
                safetyBuffer.clear();
                sampleBuffer.makeCopyOf(safetyBuffer, true);
            }
            else
            {
                sampleBuffer.makeCopyOf(tempBuffer, true);
            }
            sample[0] = sampleBuffer.getReadPointer(0);
            sample[1] = (numChannels > 1 ? sampleBuffer.getReadPointer(1) : sample[0]);

            updateDerivedParameters();
            // Set the FFT's sample rate to the file's sample rate.
            fftHqInstance.setSampleRate(static_cast<float>(sampleData.sampleRate > 0 ? sampleData.sampleRate : 44100.0));
        }

        // --- handleHiseEvent()
        // On note-on events, resets a voice with start position and read delta.
        void handleHiseEvent(HiseEvent& e)
        {
            if (e.isNoteOn())
            {
                auto& voice = voices.get();
                int currentSampleLength = sampleBuffer.getNumSamples();
                if (currentSampleLength < 1)
                    currentSampleLength = 1;
                double startPos = playheadPosition * (currentSampleLength - 1);
                double baseDelta = pitchRatios[e.getNoteNumber()] * sampleRateRatio;
                double globalFactor = std::pow(2.0, pitchOffsetSemitones / 12.0);
                double readDelta = baseDelta * globalFactor;
                voice.reset(e.getNoteNumber(), e.getFloatVelocity(), startPos, readDelta);
            }
        }

        // --- process()
        // Processes audio by reading from the sample buffer and adding
        // interpolated samples to the output channels.
        template <typename ProcessDataType>
        void process(ProcessDataType& data)
        {
            DataReadLock sl(this->sampleData);
            auto& fixData = data.template as<ProcessData<getFixChannelAmount()>>();
            auto audioBlock = fixData.toAudioBlock();
            auto* leftChannel = audioBlock.getChannelPointer(0);
            auto* rightChannel = audioBlock.getChannelPointer(1);
            int totalSamples = data.getNumSamples();

            const int sampleLen = sampleBuffer.getNumSamples();
            if (sampleLen <= 0)
            {
                audioBlock.clear();
                return;
            }

            for (auto& voice : voices)
            {
                if (!voice.isActive)
                    continue;

                float voiceGain = voice.velocity * gain;
                double posLocal = voice.position;
                double delta = voice.delta;

                for (int i = 0; i < totalSamples; ++i)
                {
                    if (posLocal >= sampleLen - 1)
                    {
                        voice.isActive = false;
                        break;
                    }
                    int idx = static_cast<int>(posLocal);
                    float frac = static_cast<float>(posLocal - idx);

                    float s0L = sample[0][idx];
                    float s1L = sample[0][(idx + 1 < sampleLen ? idx + 1 : sampleLen - 1)];
                    float s0R = sample[1][idx];
                    float s1R = sample[1][(idx + 1 < sampleLen ? idx + 1 : sampleLen - 1)];

                    float interpL = s0L + frac * (s1L - s0L);
                    float interpR = s0R + frac * (s1R - s0R);

                    leftChannel[i] += interpL * voiceGain;
                    rightChannel[i] += interpR * voiceGain;

                    posLocal += delta;
                }
                voice.position = posLocal;
            }
        }

        // --- createParameters()
        // Sets up UI parameters for pitch offset, playhead, gain, lowpass cutoff, and FFT processing enable.
        void createParameters(ParameterDataList& data)
        {
            {
                parameter::data pitchOffsetParam("Pitch (semitones)", { -24.0, 24.0, 0.01 });
                registerCallback<0>(pitchOffsetParam);
                pitchOffsetParam.setDefaultValue(0.0);
                data.add(std::move(pitchOffsetParam));
            }
            {
                parameter::data playheadParam("Playhead Position", { 0.0, 1.0, 0.001 });
                registerCallback<1>(playheadParam);
                playheadParam.setDefaultValue(0.0);
                data.add(std::move(playheadParam));
            }
            {
                parameter::data gainParam("Gain", { 0.0, 1.0, 0.01 });
                registerCallback<2>(gainParam);
                gainParam.setDefaultValue(1.0);
                data.add(std::move(gainParam));
            }
            {
                parameter::data lowpassParam("Lowpass Cutoff (Hz)", { 20.0, 20000.0, 1.0 });
                registerCallback<3>(lowpassParam);
                lowpassParam.setDefaultValue(5000.0);
                data.add(std::move(lowpassParam));
            }
            {
                parameter::data processFFTParam("Process FFT", { 0.0, 1.0, 1.0 });
                registerCallback<4>(processFFTParam);
                processFFTParam.setDefaultValue(0.0);
                data.add(std::move(processFFTParam));
            }
        }

        // --- setParameter()
        // Updates parameters based on index.
        template <int P>
        void setParameter(double v)
        {
            if constexpr (P == 0)
                pitchOffsetSemitones = v;
            else if constexpr (P == 1)
                playheadPosition = static_cast<float>(v);
            else if constexpr (P == 2)
                gain = static_cast<float>(v);
            else if constexpr (P == 3)
            {
                lowpassCutoff = v;
                fftHqInstance.setLowpassCutoff(static_cast<float>(lowpassCutoff));
            }
            else if constexpr (P == 4)
            {
                bool newVal = (v >= 0.5);
                if (newVal != processFFT)
                {
                    processFFT = newVal;
                    if (processFFT && sampleBuffer.getNumSamples() > 0)
                    {
                        std::async(std::launch::async, [this]() { this->processSampleBufferWithFFT(); });
                    }
                }
            }
        }

        // --- initPitchRatios()
        // Precomputes pitch ratios for MIDI note numbers.
        void initPitchRatios()
        {
            for (int i = 0; i < 128; ++i)
                pitchRatios[i] = std::pow(2.0f, (float)(i - 60) / 12.0f);
        }

        // --- processSampleBufferWithFFT()
        // Calls the FFT processing interface to process the entire sample buffer.
        // This is where GriffinFFT_HQ processes the sample data (using its processEntireBuffer method).
        void processSampleBufferWithFFT()
        {
            const int numSamples = sampleBuffer.getNumSamples();
            if (numSamples == 0)
                return;

            for (int ch = 0; ch < sampleBuffer.getNumChannels(); ++ch)
            {
                const float* inData = sampleBuffer.getReadPointer(ch);
                auto processed = fftHqInstance.processEntireBuffer(inData, numSamples, false);
                float* outPtr = sampleBuffer.getWritePointer(ch);
                int copyLength = std::min(static_cast<int>(processed.size()), numSamples);
                std::copy(processed.begin(), processed.begin() + copyLength, outPtr);
            }
            sample[0] = sampleBuffer.getReadPointer(0);
            sample[1] = (sampleBuffer.getNumChannels() > 1 ? sampleBuffer.getReadPointer(1) : sample[0]);
        }

        // --- Unused Functions ---
        template <typename FrameDataType>
        void processFrame(FrameDataType& /*data*/) {}
        void reset() {}

        // --- Member Variables ---
        double pitchOffsetSemitones = 0.0;
        float  playheadPosition = 0.0f;
        float  gain = 1.0f;
        double lowpassCutoff = 5000.0;
        bool   processFFT = false;
    };
}
