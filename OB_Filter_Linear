#pragma once
#include <JuceHeader.h>
#include <cmath>
#include "src\eigen-master\Eigen\Dense"


/**
 
==============| by GriffinBoy (2025) |==============

This node implements an OB8 2-SVF (State-Variable Filter) with global feedback
using the Delay-Free method as described in DAFx-2020.

Features:
- Parameter smoothing via Juce's SmoothedValue class
- Bilinear (TPT) transform implementation
- Optimized 4x4 matrix inversion using the Eigen library
- Recalculates matrices only when parameters change (dirty flags)
- Keytracking support for cutoff frequency
- (rough) Resonance compensation for frequency shift
- (rough) Gain compensation for resonance control

Integration Steps for HISE:
1. Eigen Setup: Download and place the Eigen library under:
   ProjectName/DspNetworks/ThirdParty/src/eigen-master
2. Create a 3rd party C++ node in HISE named "Griffin_OBFilter"
3. Compile the initial DLL in HISE using "Compile dsp networks as .dll"
4. Replace the generated "Griffin_OBFilter.h" (in ProjectName/DspNetworks/ThirdParty)
   with this header file you are reading now
5. Re-compile the final DLL in HISE using "Compile dsp networks as .dll" 

Continuous-Time System Definition:
  x1'(t) = -2*r*x1 - x2 - kf*x4 + input
  x2'(t) = x1
  x3'(t) = -2*r*x3 - x4 + x2
  x4'(t) = x3
(Output is taken from state x4)

Bilinear Transform:
  M = I - g*A,   N = I + g*A, where g = 2 * tan(pi * fc / fs)
  (M is inverted using Eigen's optimized fixed-size matrix inversion)

Optimizations:
- Precomputed reciprocals and constants
- Eigen fixed-size matrices for 4x4 operations
- Dirty flags for matrix recalculation only when parameters change

Author: GriffinBoy (2025)
License: UwU 
*/



namespace project
{
    using namespace juce;
    using namespace hise;
    using namespace scriptnode;

    template <int NV> // NV = Number of Voices
    struct Griffin_OBFilter : public data::base
    {
        SNEX_NODE(Griffin_OBFilter);

        struct MetadataClass { SN_NODE_ID("Griffin_OBFilter"); };

        static constexpr bool isModNode() { return false; }
        static constexpr bool isPolyphonic() { return NV > 1; }
        static constexpr bool hasTail() { return false; }
        static constexpr bool isSuspendedOnSilence() { return false; }
        static constexpr int  getFixChannelAmount() { return 2; }

        static constexpr int  NumTables = 0;
        static constexpr int  NumSliderPacks = 0;
        static constexpr int  NumAudioFiles = 0;
        static constexpr int  NumFilters = 0;
        static constexpr int  NumDisplayBuffers = 0;

        //=========================================================================
        // Parameters (Raw Values)
        //=========================================================================
        float cutoffFrequency = 1000.0f;
        float resonance = 0.0f;    // Range: [0, 35]
        float keytrackAmount = 1.0f;
        float sampleRate = 44100.0f;

        //=========================================================================
        // Smoothing Objects for Per-Sample Smoothing
        //=========================================================================
        SmoothedValue<float> cutoffSmooth;
        SmoothedValue<float> resonanceSmooth;
        SmoothedValue<float> keytrackSmooth;

        //=========================================================================
        // Prepare Function
        // - Sets up voices and initializes smoothers.
        //=========================================================================
        void prepare(PrepareSpecs specs)
        {
            sampleRate = specs.sampleRate;
            filtersLeft.prepare(specs);
            filtersRight.prepare(specs);

            for (auto& v : filtersLeft)
                v.prepare(sampleRate);
            for (auto& v : filtersRight)
                v.prepare(sampleRate);

            // Set smoothing time (10ms)
            cutoffSmooth.reset(sampleRate, 0.01);
            resonanceSmooth.reset(sampleRate, 0.01);
            keytrackSmooth.reset(sampleRate, 0.01);

            cutoffSmooth.setCurrentAndTargetValue(cutoffFrequency);
            resonanceSmooth.setCurrentAndTargetValue(resonance);
            keytrackSmooth.setCurrentAndTargetValue(keytrackAmount);
        }

        void reset()
        {
            for (auto& v : filtersLeft)
                v.reset();
            for (auto& v : filtersRight)
                v.reset();
        }

        //=========================================================================
        // Process Audio
        // - Updates parameters per sample using smoothed values.
        //=========================================================================
        template <typename ProcessDataType>
        void process(ProcessDataType& data)
        {
            auto& fixData = data.template as<ProcessData<getFixChannelAmount()>>();
            auto audioBlock = fixData.toAudioBlock();

            float* leftCh = audioBlock.getChannelPointer(0);
            float* rightCh = audioBlock.getChannelPointer(1);
            int numSamples = static_cast<int>(data.getNumSamples());

            for (int i = 0; i < numSamples; ++i)
            {
                // Get per-sample smoothed parameter values
                float cVal = cutoffSmooth.getNextValue();
                float rVal = resonanceSmooth.getNextValue();
                float kVal = keytrackSmooth.getNextValue();

                // Update each voice with new smoothed parameters
                for (auto& v : filtersLeft)
                {
                    v.setCutoff(cVal);
                    v.setResonance(rVal);
                    v.setKeytrack(kVal);
                    v.applyChangesIfNeeded();
                }
                for (auto& v : filtersRight)
                {
                    v.setCutoff(cVal);
                    v.setResonance(rVal);
                    v.setKeytrack(kVal);
                    v.applyChangesIfNeeded();
                }

                // Process sample for each voice in series
                float outL = leftCh[i];
                float outR = rightCh[i];
                for (auto& v : filtersLeft)
                    outL = v.processSample(outL);
                for (auto& v : filtersRight)
                    outR = v.processSample(outR);

                leftCh[i] = outL;
                rightCh[i] = outR;
            }
        }

        template <typename FrameDataType>
        void processFrame(FrameDataType& data) {}

        //=========================================================================
        // AudioEffect Class: OB8-Style Voice-Level Filter
        // - Implements the filter logic with Eigen optimizations.
        //=========================================================================
        class AudioEffect
        {
        public:
            AudioEffect() = default;

            inline void prepare(float fs)
            {
                sampleRate = fs;
                baseCutoff = 1000.0f;
                resonance = 0.0f;
                rDamping = 3.4f; // Fixed damping value
                keytrackAmount = 1.0f;
                storedNote = 60;
                reset();
                dirtyFlags = 0;
                updateAll(); // Initial matrix calculations
            }

            inline void reset()
            {
                x.setZero();
            }

            //=====================================================================
            // Parameter Setting Functions
            //=====================================================================
            enum Dirty : uint32_t
            {
                changedCutoff = 1 << 0,
                changedResonance = 1 << 1,
                changedKeytrack = 1 << 2,
                changedNote = 1 << 3
            };

            inline void setCutoff(float c)
            {
                baseCutoff = c;
                dirtyFlags |= changedCutoff;
            }
            inline void setResonance(float r)
            {
                resonance = r;
                dirtyFlags |= changedResonance;
            }
            inline void setKeytrack(float kt)
            {
                keytrackAmount = kt;
                dirtyFlags |= changedKeytrack;
            }
            inline void setNoteNumber(int n)
            {
                storedNote = n;
                dirtyFlags |= changedNote;
            }
            inline void applyChangesIfNeeded()
            {
                if (dirtyFlags != 0)
                    updateAll();
            }

            //=====================================================================
            // Process Sample Function
            // - Processes a single sample and applies the filter.
            //=====================================================================
            inline float processSample(float input)
            {
                constexpr float noiseFloor = 0.005f;
                input += noiseFloor * (noiseGen.nextFloat() - 0.5f); // Add slight noise for stability

                // State update and output calculation (Eigen optimized)
                Eigen::Vector4f temp = N * x + gB * input;
                Eigen::Vector4f newX = MInv * temp;
                float out = C.dot(newX) * gainComp;
                x = newX;
                return out;
            }

        private:
            //=====================================================================
            // Update All Parameters Function
            // - Recalculates matrices and inversion when parameters change.
            //=====================================================================
            inline void updateAll()
            {
                // Keytracking calculation
                float semitones = (static_cast<float>(storedNote) - 60.0f) * keytrackAmount;
                float noteFactor = std::exp2f(0.0833333f * semitones);
                float fc = baseCutoff * noteFactor;

                // Cutoff frequency clamping [20 Hz, 20 kHz]
                if (fc < 20.0f)
                    fc = 20.0f;
                if (fc > 20000.0f)
                    fc = 20000.0f;

                // Compensation offset for frequency shift (empirical)
                float compensationOffset = 0.44f * fc - 30.0f;
                if (compensationOffset < 0.0f)
                    compensationOffset = 0.0f;

                // Resonance compensation
                fc -= (resonance / 35.0f) * compensationOffset;

                // Re-clamp cutoff after compensation
                if (fc < 20.0f)
                    fc = 20.0f;
                if (fc > 20000.0f)
                    fc = 20000.0f;

                // TPT Warped frequency and g parameter
                const float fsRecip = 1.0f / sampleRate;
                const float factor = MathConstants<float>::pi * fc * fsRecip;
                const float warped = std::tan(factor);
                g = 2.0f * warped;

                // Matrix construction and inversion
                buildContinuousTimeSystem();
                buildDiscreteTimeMatrices();
                MInv = M.inverse();
                C = Ccont; // Set output vector

                // Gain Compensation (Resonance dependent)
                if (dirtyFlags & changedResonance)
                {
                    gainComp = std::pow(10.0f, (std::sqrt(resonance / 35.0f) * 22.0f) / 20.0f);
                }

                dirtyFlags = 0; // Clear dirty flags
            }


            //=====================================================================
            // Build Continuous-Time System Function
            // - Defines the continuous-time state-space matrices (Acont, Bcont, Ccont).
            //=====================================================================
            inline void buildContinuousTimeSystem()
            {
                const float twoR = 2.0f * rDamping;
                Acont.setZero();
                Bcont.setZero();
                Ccont.setZero();

                // State equations (matrix A)
                Acont(0, 0) = -twoR;
                Acont(0, 1) = -1.0f;
                Acont(0, 3) = -resonance;
                Acont(1, 0) = 1.0f;
                Acont(2, 1) = 1.0f;
                Acont(2, 2) = -twoR;
                Acont(2, 3) = -1.0f;
                Acont(3, 2) = 1.0f;

                // Input matrix B (input to x1')
                Bcont(0) = 1.0f;

                // Output matrix C (output from x4)
                Ccont(3) = 1.0f;
            }

            //=====================================================================
            // Build Discrete-Time Matrices Function
            // - Discretizes the continuous-time system using TPT transform (M, N, gB).
            //=====================================================================
            inline void buildDiscreteTimeMatrices()
            {
                Eigen::Matrix4f gA = g * Acont;
                M = Eigen::Matrix4f::Identity() - gA;
                N = Eigen::Matrix4f::Identity() + gA;
                gB = g * Bcont;
            }

            //=====================================================================
            // Member Variables (AudioEffect)
            //=====================================================================
            float sampleRate = 44100.0f;
            float baseCutoff = 1000.0f;
            float resonance = 0.0f;
            float rDamping = 3.4f;        // Fixed damping parameter
            float keytrackAmount = 1.0f;
            int storedNote = 60;
            float g = 0.0f;             // Warped frequency parameter

            Eigen::Vector4f x = Eigen::Vector4f::Zero();         // State vector
            Eigen::Matrix4f Acont = Eigen::Matrix4f::Zero();    // Continuous-time A matrix
            Eigen::Vector4f Bcont = Eigen::Vector4f::Zero();     // Continuous-time B matrix
            Eigen::Vector4f Ccont = Eigen::Vector4f::Zero();     // Continuous-time C matrix
            Eigen::Matrix4f M = Eigen::Matrix4f::Zero();         // Discrete-time M matrix
            Eigen::Matrix4f N = Eigen::Matrix4f::Zero();         // Discrete-time N matrix
            Eigen::Matrix4f MInv = Eigen::Matrix4f::Zero();      // Inverted M matrix
            Eigen::Vector4f gB = Eigen::Vector4f::Zero();        // Discrete-time gB matrix
            Eigen::Vector4f C = Eigen::Vector4f::Zero();         // Discrete-time C matrix (output)

            float gainComp = 1.0f;          // Gain compensation factor
            uint32_t dirtyFlags = 0;        // Flags to track parameter changes
            juce::Random noiseGen;          // Random number generator for noise
        };

        //=========================================================================
        // Parameter Setting (Per Sample Update)
        //=========================================================================
        template <int P>
        void setParameter(double val)
        {
            if (P == 0)
            {
                cutoffFrequency = static_cast<float>(val);
                cutoffSmooth.setTargetValue(cutoffFrequency);
            }
            else if (P == 1)
            {
                resonance = static_cast<float>(val);
                if (resonance < 0.0f)
                    resonance = 0.0f;
                if (resonance > 35.0f)
                    resonance = 35.0f;
                resonanceSmooth.setTargetValue(resonance);
            }
            else if (P == 2)
            {
                keytrackAmount = static_cast<float>(val);
                keytrackSmooth.setTargetValue(keytrackAmount);
            }
        }

        void createParameters(ParameterDataList& data)
        {
            {
                parameter::data p("Cutoff Frequency", { 100.0, 20000.0, 1.0 });
                registerCallback<0>(p);
                p.setDefaultValue(1000.0f);
                data.add(std::move(p));
            }
            {
                parameter::data p("Resonance", { 0.0, 35.0, 0.01 });
                registerCallback<1>(p);
                p.setDefaultValue(0.0f);
                data.add(std::move(p));
            }
            {
                parameter::data p("Keytrack Amount", { -1.0, 1.0, 0.5 });
                registerCallback<2>(p);
                p.setDefaultValue(0.0f);
                data.add(std::move(p));
            }
        }

        void setExternalData(const ExternalData& data, int index) {}

        //=========================================================================
        // Note Handling
        //=========================================================================
        void handleHiseEvent(HiseEvent& e)
        {
            if (e.isNoteOn())
            {
                filtersLeft.get().setNoteNumber(e.getNoteNumber());
                filtersLeft.get().applyChangesIfNeeded();

                filtersRight.get().setNoteNumber(e.getNoteNumber());
                filtersRight.get().applyChangesIfNeeded();
            }
        }

    private:
        PolyData<AudioEffect, NV> filtersLeft;
        PolyData<AudioEffect, NV> filtersRight;
    };
}
