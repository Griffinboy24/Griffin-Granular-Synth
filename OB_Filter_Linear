#pragma once
#include <JuceHeader.h>

/*
   ================================================================================================
   OB8-Tuned 2-SVF + Global Feedback Filter with Sample-by-Sample Parameter Updates
   using the Exact Delay-Free Method (DAFx-2020) with the "Old" Discretisation/Inversion.

   This implementation preserves per‑sample parameter smoothing (using SmoothedValue)
   while reverting only the discretisation (and state‑space inversion) to the previous
   full 4×4 inversion approach.

   The continuous‑time system is defined as:
       x1'(t) = -2*r*x1 - x2 - kf*x4 + input
       x2'(t) = x1
       x3'(t) = -2*r*x3 - x4 + x2
       x4'(t) = x3
   with B and C defined so that the output is taken from x4.

   The bilinear (TPT) transform is used:
       M = I - g*A,  N = I + g*A,  with g = 2 * tan(pi*fc/fs)
   and then M is inverted via a generic 4×4 Gaussian elimination.
   ================================================================================================
*/

namespace project
{
    using namespace juce;
    using namespace hise;
    using namespace scriptnode;

    template <int NV> // NV = number of voices
    struct Griffin_OBFilter : public data::base
    {
        SNEX_NODE(Griffin_OBFilter);

        struct MetadataClass { SN_NODE_ID("Griffin_OBFilter"); };

        static constexpr bool isModNode() { return false; }
        static constexpr bool isPolyphonic() { return NV > 1; }
        static constexpr bool hasTail() { return false; }
        static constexpr bool isSuspendedOnSilence() { return false; }
        static constexpr int  getFixChannelAmount() { return 2; }

        static constexpr int  NumTables = 0;
        static constexpr int  NumSliderPacks = 0;
        static constexpr int  NumAudioFiles = 0;
        static constexpr int  NumFilters = 0;
        static constexpr int  NumDisplayBuffers = 0;

        // Parameters (raw values)
        float cutoffFrequency = 1000.0f;
        float resonance = 0.0f;    // range: [0, 35]
        float keytrackAmount = 1.0f;

        float sampleRate = 44100.0f;

        // Smoothing objects for per-sample smoothing
        SmoothedValue<float> cutoffSmooth;
        SmoothedValue<float> resonanceSmooth;
        SmoothedValue<float> keytrackSmooth;

        //-------------------------------------------------------------------------
        // prepare() sets up the voices and initializes the smoothers
        //-------------------------------------------------------------------------
        void prepare(PrepareSpecs specs)
        {
            sampleRate = specs.sampleRate;
            filtersLeft.prepare(specs);
            filtersRight.prepare(specs);

            for (auto& v : filtersLeft)
                v.prepare(sampleRate);
            for (auto& v : filtersRight)
                v.prepare(sampleRate);

            // Set smoothing time (here 50ms, adjust as needed)
            cutoffSmooth.reset(sampleRate, 0.05);
            resonanceSmooth.reset(sampleRate, 0.05);
            keytrackSmooth.reset(sampleRate, 0.05);

            cutoffSmooth.setCurrentAndTargetValue(cutoffFrequency);
            resonanceSmooth.setCurrentAndTargetValue(resonance);
            keytrackSmooth.setCurrentAndTargetValue(keytrackAmount);
        }

        void reset()
        {
            for (auto& v : filtersLeft)
                v.reset();
            for (auto& v : filtersRight)
                v.reset();
        }

        //-------------------------------------------------------------------------
        // Process audio: update parameters every sample using smoothed values
        //-------------------------------------------------------------------------
        template <typename ProcessDataType>
        void process(ProcessDataType& data)
        {
            auto& fixData = data.template as<ProcessData<getFixChannelAmount()>>();
            auto audioBlock = fixData.toAudioBlock();

            float* leftCh = audioBlock.getChannelPointer(0);
            float* rightCh = audioBlock.getChannelPointer(1);
            int numSamples = (int)data.getNumSamples();

            for (int i = 0; i < numSamples; ++i)
            {
                // Get per-sample smoothed parameter values
                float cVal = cutoffSmooth.getNextValue();
                float rVal = resonanceSmooth.getNextValue();
                float kVal = keytrackSmooth.getNextValue();

                // Update every voice with new smoothed parameters
                for (auto& v : filtersLeft)
                {
                    v.setCutoff(cVal);
                    v.setResonance(rVal);
                    v.setKeytrack(kVal);
                    v.applyChangesIfNeeded();
                }
                for (auto& v : filtersRight)
                {
                    v.setCutoff(cVal);
                    v.setResonance(rVal);
                    v.setKeytrack(kVal);
                    v.applyChangesIfNeeded();
                }

                // Process the sample for each voice in series (or sum/mix as needed)
                float outL = leftCh[i];
                float outR = rightCh[i];
                for (auto& v : filtersLeft)
                    outL = v.processSample(outL);
                for (auto& v : filtersRight)
                    outR = v.processSample(outR);

                leftCh[i] = outL;
                rightCh[i] = outR;
            }
        }

        template <typename FrameDataType>
        void processFrame(FrameDataType& data) {}

        //-------------------------------------------------------------------------
        // OB8-Style Voice-Level Filter using Old Discretisation with Full Inversion
        //-------------------------------------------------------------------------
        class AudioEffect
        {
        public:
            AudioEffect() = default;

            void prepare(float fs)
            {
                sampleRate = fs;
                baseCutoff = 1000.0f;
                resonance = 0.0f;
                rDamping = 3.4f; // fixed internally
                keytrackAmount = 1.0f;
                storedNote = 60;
                reset();
                dirtyFlags = 0;
                updateAll(); // Build matrices and invert M
            }

            void reset()
            {
                for (int i = 0; i < 4; ++i)
                    x[i] = 0.0f;
            }

            //--------------------------------------------------------------------------------------------
            // Partial updates (for parameter changes)
            //--------------------------------------------------------------------------------------------
            enum Dirty : uint32_t
            {
                changedCutoff = 1 << 0,
                changedResonance = 1 << 1,
                changedKeytrack = 1 << 2,
                changedNote = 1 << 3
            };

            inline void setCutoff(float c)
            {
                baseCutoff = c;
                dirtyFlags |= changedCutoff;
            }
            inline void setResonance(float r)
            {
                resonance = r;
                dirtyFlags |= changedResonance;
            }
            inline void setKeytrack(float kt)
            {
                keytrackAmount = kt;
                dirtyFlags |= changedKeytrack;
            }
            inline void setNoteNumber(int n)
            {
                storedNote = n;
                dirtyFlags |= changedNote;
            }
            inline void applyChangesIfNeeded()
            {
                if (dirtyFlags != 0)
                    updateAll();
            }

            //--------------------------------------------------------------------------------------------
            // Process a single sample using the discretised state-space
            //--------------------------------------------------------------------------------------------
            inline float processSample(float input)
            {
                // Add a noise floor to break symmetry
                constexpr float noiseFloor = 0.005f;
                input += noiseFloor * (noiseGen.nextFloat() - 0.5f);

                // Compute tempVec = N * x + (gB * input)
                float temp[4];
                mulMatVec4(N, x, temp);
                temp[0] += gB[0] * input;
                temp[1] += gB[1] * input;
                temp[2] += gB[2] * input;
                temp[3] += gB[3] * input;

                // Solve for new state: x = MInv * temp
                float newX[4];
                mulMatVec4(MInv, temp, newX);

                // Compute output: y = C * newX
                float out = 0.0f;
                for (int i = 0; i < 4; ++i)
                    out += C[i] * newX[i];

                // Update state
                for (int i = 0; i < 4; ++i)
                    x[i] = newX[i];

                return out;
            }

        private:
            //--------------------------------------------------------------------------------------------
            // Recompute matrices and update inversion if parameters have changed
            //--------------------------------------------------------------------------------------------
            void updateAll()
            {
                // Compute effective cutoff with keytracking
                float semitones = ((float)storedNote - 60.0f) * keytrackAmount;
                float noteFactor = std::exp2f(0.0833333f * semitones);
                float fc = baseCutoff * noteFactor;
                if (fc < 20.0f) fc = 20.0f;
                float limit = 0.49f * sampleRate;
                if (fc > limit) fc = limit;

                // Bilinear transform coefficient: g = 2 * tan(pi * fc / fs)
                float norm = fc / sampleRate;
                float warped = std::tan(MathConstants<float>::pi * norm);
                g = 2.0f * warped;

                // Build continuous-time state-space matrices
                buildContinuousTimeSystem();

                // Build discrete-time matrices using TPT:
                buildDiscreteTimeMatrices();

                // Invert M (I - gA) to obtain MInv
                invert4x4(M, MInv);

                // Copy continuous-time output vector into discrete-time output vector
                for (int i = 0; i < 4; ++i)
                    C[i] = Ccont[i];

                dirtyFlags = 0;
            }

            //--------------------------------------------------------------------------------------------
            // Build the continuous-time state-space for the 2-SVF + global feedback system
            //--------------------------------------------------------------------------------------------
            void buildContinuousTimeSystem()
            {
                const float r = rDamping;
                const float kf = resonance;
                // Clear matrices
                for (int rr = 0; rr < 4; ++rr)
                {
                    for (int cc = 0; cc < 4; ++cc)
                        Acont[rr][cc] = 0.0f;
                }
                for (int i = 0; i < 4; ++i)
                {
                    Bcont[i] = 0.0f;
                    Ccont[i] = 0.0f;
                }
                // x1'(t) row
                Acont[0][0] = -2.0f * r;
                Acont[0][1] = -1.0f;
                Acont[0][3] = -kf;
                // x2'(t) row
                Acont[1][0] = 1.0f;
                // x3'(t) row
                Acont[2][1] = 1.0f;
                Acont[2][2] = -2.0f * r;
                Acont[2][3] = -1.0f;
                // x4'(t) row
                Acont[3][2] = 1.0f;

                // B: input goes to x1'
                Bcont[0] = 1.0f;
                // C: output is x4
                Ccont[3] = 1.0f;
            }

            //--------------------------------------------------------------------------------------------
            // Build discrete-time matrices using TPT
            //--------------------------------------------------------------------------------------------
            void buildDiscreteTimeMatrices()
            {
                float gA[4][4];
                for (int rr = 0; rr < 4; ++rr)
                {
                    for (int cc = 0; cc < 4; ++cc)
                        gA[rr][cc] = g * Acont[rr][cc];
                }
                for (int rr = 0; rr < 4; ++rr)
                {
                    for (int cc = 0; cc < 4; ++cc)
                    {
                        float valMinus = ((rr == cc) ? 1.0f : 0.0f) - gA[rr][cc];
                        float valPlus = ((rr == cc) ? 1.0f : 0.0f) + gA[rr][cc];
                        M[rr][cc] = valMinus;
                        N[rr][cc] = valPlus;
                    }
                }
                for (int i = 0; i < 4; ++i)
                    gB[i] = g * Bcont[i];
            }

            //--------------------------------------------------------------------------------------------
            // Invert a 4x4 matrix using Gaussian elimination
            //--------------------------------------------------------------------------------------------
            static void invert4x4(const float src[4][4], float dst[4][4])
            {
                float tmp[4][8];
                for (int r = 0; r < 4; ++r)
                {
                    for (int c = 0; c < 4; ++c)
                        tmp[r][c] = src[r][c];
                    for (int c = 4; c < 8; ++c)
                        tmp[r][c] = (c - 4 == r) ? 1.0f : 0.0f;
                }
                for (int c = 0; c < 4; ++c)
                {
                    float pivot = tmp[c][c];
                    if (std::fabs(pivot) < 1.0e-12f)
                        pivot = 1.0e-12f;
                    for (int cc = 0; cc < 8; ++cc)
                        tmp[c][cc] /= pivot;
                    for (int r = 0; r < 4; ++r)
                    {
                        if (r != c)
                        {
                            float factor = tmp[r][c];
                            for (int cc = 0; cc < 8; ++cc)
                                tmp[r][cc] -= factor * tmp[c][cc];
                        }
                    }
                }
                for (int r = 0; r < 4; ++r)
                {
                    for (int c = 0; c < 4; ++c)
                        dst[r][c] = tmp[r][c + 4];
                }
            }

            //--------------------------------------------------------------------------------------------
            // Multiply a 4x4 matrix by a 4-vector
            //--------------------------------------------------------------------------------------------
            static void mulMatVec4(const float mat[4][4], const float vec[4], float out[4])
            {
                for (int rr = 0; rr < 4; ++rr)
                {
                    float sum = 0.0f;
                    for (int cc = 0; cc < 4; ++cc)
                        sum += mat[rr][cc] * vec[cc];
                    out[rr] = sum;
                }
            }

            float sampleRate = 44100.0f;
            float baseCutoff = 1000.0f;
            float resonance = 0.0f;
            float rDamping = 3.4f;
            float keytrackAmount = 1.0f;
            int storedNote = 60;

            float x[4] = { 0.f, 0.f, 0.f, 0.f };
            float g = 0.0f;

            float Acont[4][4];
            float Bcont[4];
            float Ccont[4];

            float M[4][4], N[4][4], MInv[4][4];
            float gB[4];
            float C[4];

            uint32_t dirtyFlags = 0;
            juce::Random noiseGen;
        };

        //-------------------------------------------------------------------------
        // Parameter setting (per sample update)
        //-------------------------------------------------------------------------
        template <int P>
        void setParameter(double val)
        {
            if (P == 0)
            {
                cutoffFrequency = (float)val;
                cutoffSmooth.setTargetValue(cutoffFrequency);
            }
            else if (P == 1)
            {
                resonance = (float)val;
                if (resonance < 0.0f)
                    resonance = 0.0f;
                if (resonance > 35.0f)
                    resonance = 35.0f;
                resonanceSmooth.setTargetValue(resonance);
            }
            else if (P == 2)
            {
                keytrackAmount = (float)val;
                keytrackSmooth.setTargetValue(keytrackAmount);
            }
        }

        void createParameters(ParameterDataList& data)
        {
            {
                parameter::data p("Cutoff Frequency", { 300.0, 20000.0, 1.0 });
                registerCallback<0>(p);
                p.setDefaultValue(1000.0f);
                data.add(std::move(p));
            }
            {
                parameter::data p("Resonance", { 0.0, 35.0, 0.01 });
                registerCallback<1>(p);
                p.setDefaultValue(0.0f);
                data.add(std::move(p));
            }
            {
                parameter::data p("Keytrack Amount", { -1.0, 1.0, 0.01 });
                registerCallback<2>(p);
                p.setDefaultValue(1.0f);
                data.add(std::move(p));
            }
        }

        void setExternalData(const ExternalData& data, int index) {}

        //-------------------------------------------------------------------------
        // Note handling
        //-------------------------------------------------------------------------
        void handleHiseEvent(HiseEvent& e)
        {
            if (e.isNoteOn())
            {
                filtersLeft.get().setNoteNumber(e.getNoteNumber());
                filtersLeft.get().applyChangesIfNeeded();

                filtersRight.get().setNoteNumber(e.getNoteNumber());
                filtersRight.get().applyChangesIfNeeded();
            }
        }

    private:
        PolyData<AudioEffect, NV> filtersLeft;
        PolyData<AudioEffect, NV> filtersRight;
    };
}
