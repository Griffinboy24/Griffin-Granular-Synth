#pragma once
#include <JuceHeader.h>
#include <array>
#include <vector>
#include <complex>
#include <cstring>
#include <cmath>
#include <algorithm>

/*
  GriffinFFT_HQ – FFT-based filtering & spectral manipulation (by griffinboy)

  Overview:
    This class implements a lowpass filter using FFT processing with overlap–add.
    It collects audio samples into frames (2048 samples per frame, with 75% overlap),
    applies a Hann window, and then uses a zero-padded FFT (4096 points) for improved
    frequency resolution. In the frequency domain, the default behavior is to zero
    out all bins above a set lowpass cutoff. 

  Key Features:
    - fftSize: 2048 samples per frame (fftOrder = 11)
    - Overlap: 75% (hopSize = 2048/4 = 512 samples)
    - Zero-padding: Frame is zero-padded to 4096 (zeroPadOrder = 12) for better resolution.
    - Windowing: A Hann window (windowTable) is applied before FFT;
                 a composite window (squared Hann with correction) is used for overlap–add.

  Public Interfaces:
    • processBlock(): Process an array of samples.
    • processSample(): Process one sample at a time.
    • processEntireBuffer(): One-shot processing of a complete buffer.

  Customization:
    To implement your own spectral effects (or modify the lowpass filter), edit the
    processSpectrum() function. There you can adjust each frequency bin’s magnitude or
    phase as desired.
*/

class GriffinFFT_HQ
{
public:
    // --- FFT/Overlap Settings ---
    static constexpr int fftOrder = 11;              // 2^11 = 2048 samples per frame
    static constexpr int fftSize = 1 << fftOrder;      // 2048 samples per FFT frame
    static constexpr int numBins = fftSize / 2 + 1;    // Unique frequency bins for a real FFT
    static constexpr int overlap = 4;                // Overlap factor (75% overlap)
    static constexpr int hopSize = fftSize / overlap;  // 512 new samples per frame

    // --- Zero-Padding Settings ---
    static constexpr int zeroPadOrder = fftOrder + 1;  // Increase FFT size to 2^(11+1)=4096 samples
    static constexpr int paddedSize = 1 << zeroPadOrder; // Zero-padded FFT size (4096)
    static constexpr int paddedNumBins = paddedSize / 2 + 1;
    static constexpr float windowCorrection = 2.0f / 3.0f; // Correction factor for perfect overlap–add

    // --- Public Parameter Setters ---
    inline void setSampleRate(float sr) { currentSampleRate = sr; }
    inline void setLowpassCutoff(float freqHz) { lowpassCutoffFrequency = freqHz; }

    // --- Constructor ---
    /*
      Initializes FFT objects, creates the window functions, and clears the buffers.
    */
    GriffinFFT_HQ() : fft(fftOrder), fftPadded(zeroPadOrder),
        currentSampleRate(44100.0f), lowpassCutoffFrequency(5000.0f),
        pos(0), count(0)
    {
        // Allocate and initialize window tables.
        windowTable.resize(fftSize);
        compositeWindow.resize(fftSize);
        // Build a Hann window that tapers smoothly to zero at the end.
        for (int i = 0; i < fftSize; ++i)
            windowTable[i] = 0.5f * (1.0f - std::cos((2.0f * float(3.14159265358979323846) * i) / (fftSize - 1)));
        // Composite window for overlap–add: square the Hann window then apply correction.
        for (int i = 0; i < fftSize; ++i)
            compositeWindow[i] = windowTable[i] * windowTable[i] * windowCorrection;
        // Clear the circular input and output buffers.
        inputFifo.fill(0.0f);
        outputFifo.fill(0.0f);
        // Allocate temporary FFT buffers.
        fftData.resize(fftSize * 2, 0.0f);
        paddedData.resize(paddedSize * 2, 0.0f);
    }

    // --- reset() ---
    // Clears internal state and resets the circular buffers.
    inline void reset()
    {
        count = 0;
        pos = 0;
        inputFifo.fill(0.0f);
        outputFifo.fill(0.0f);
    }

    // --- processBlock() ---
    /*
      Processes an array of samples.
      1. Copies incoming samples into the circular input buffer.
      2. Outputs any ready (overlap–added) samples.
      3. Every hopSize samples, it calls processFrame() to process an FFT frame.
    */
    inline void processBlock(const float* inBlock, float* outBlock, int numSamples, bool bypassed)
    {
        int i = 0;
        while (i < numSamples)
        {
            int localPos = pos;                     // Current circular buffer position.
            int samplesUntilEnd = fftSize - localPos; // Samples until the end of the buffer.
            int samplesUntilFFT = hopSize - count;    // Samples needed to trigger FFT processing.
            int chunk = std::min({ numSamples - i, samplesUntilEnd, samplesUntilFFT });

            // Copy new samples into the input circular buffer.
            std::copy(inBlock + i, inBlock + i + chunk, inputFifo.begin() + localPos);
            // Output any processed samples.
            std::copy(outputFifo.begin() + localPos, outputFifo.begin() + localPos + chunk, outBlock + i);
            // Clear the used output portion.
            std::fill(outputFifo.begin() + localPos, outputFifo.begin() + localPos + chunk, 0.0f);

            localPos = (localPos + chunk) & (fftSize - 1); // Wrap-around the circular buffer.
            pos = localPos;
            count += chunk;
            i += chunk;

            // When we've collected enough samples, process an FFT frame.
            if (count >= hopSize)
            {
                count = 0;
                processFrame(bypassed);
            }
        }
    }

    // --- processSample() ---
    /*
      Processes a single sample.
      Inserts the sample into the circular buffer, retrieves the output,
      and triggers FFT frame processing every hopSize samples.
    */
    inline float processSample(float sample, bool bypassed)
    {
        float outSample = outputFifo[pos];  // Retrieve output sample from current position.
        inputFifo[pos] = sample;            // Place new sample in input buffer.
        outputFifo[pos] = 0.0f;             // Clear output at this position.
        pos = (pos + 1) & (fftSize - 1);     // Advance circular buffer pointer.
        count = (count + 1) % hopSize;
        if (count == 0)
            processFrame(bypassed);
        return outSample;
    }

    // --- flushRemaining() ---
    // Processes extra zeros to flush out remaining samples in the buffer.
    inline std::vector<float> flushRemaining(bool bypassed)
    {
        std::vector<float> flushed;
        flushed.reserve(fftSize);
        for (int i = 0; i < fftSize; ++i)
            flushed.push_back(processSample(0.0f, bypassed));
        return flushed;
    }

    // --- processEntireBuffer() ---
    /*
      One-shot processing of an entire input buffer.
      Returns the filtered output with the initial FFT delay removed.
    */
    std::vector<float> processEntireBuffer(const float* inData, int numSamples, bool bypassed)
    {
        reset();
        std::vector<float> outBuffer(numSamples + fftSize, 0.0f);
        processBlock(inData, outBuffer.data(), numSamples, bypassed);
        auto flushed = flushRemaining(bypassed);
        outBuffer.insert(outBuffer.end(), flushed.begin(), flushed.end());
        // Remove the initial delay introduced by FFT block processing.
        // Remove (fftSize - hopSize).
        const int delay = fftSize - hopSize; // 2048 - 512 = 1536

        int totalOut = static_cast<int>(outBuffer.size());
        int trimmedLength = std::min(totalOut - delay, numSamples);
        std::vector<float> trimmed(trimmedLength, 0.0f);
        std::copy(outBuffer.begin() + delay, outBuffer.begin() + delay + trimmedLength, trimmed.begin());
        return trimmed;
    }

private:
    // --- FFT Objects (using JUCE) ---
    juce::dsp::FFT fft;         // FFT object for 2048-sample frames.
    juce::dsp::FFT fftPadded;   // FFT object for 4096-sample (zero-padded) frames.

    // --- Windowing Arrays ---
    std::vector<float> windowTable;      // Hann window applied before FFT.
    std::vector<float> compositeWindow;  // Squared Hann window (with correction) for overlap–add.

    // --- Circular Buffers ---
    std::array<float, fftSize> inputFifo{};   // Circular buffer for input samples.
    std::array<float, fftSize> outputFifo{};  // Circular buffer for overlap–added output.

    // --- Temporary FFT Buffers ---
    std::vector<float> fftData;     // Holds one FFT frame (2048 samples).
    std::vector<float> paddedData;  // Zero-padded FFT frame (4096 samples).

    // --- Internal State Variables ---
    int count;       // Number of samples collected since last FFT frame.
    int pos;         // Current index in the circular buffers.
    float currentSampleRate;
    float lowpassCutoffFrequency;

    // --- reassembleFFTFrame() ---
    /*
      Copies fftSize consecutive samples from the circular input buffer
      into a contiguous block pointed to by dest.
    */
    inline void reassembleFFTFrame(float* dest)
    {
        for (int i = 0; i < fftSize; ++i)
            dest[i] = inputFifo[(pos + i) & (fftSize - 1)];
    }

    // --- processFrame() ---
    /*
      Processes one FFT frame (called every hopSize samples).
      Steps:
        1. Reassemble a contiguous time-domain frame from the circular buffer.
        2. Zero-pad the frame into paddedData.
        3. Apply the Hann window to reduce spectral leakage.
        4. If not bypassed, transform to the frequency domain, call processSpectrum(),
           and transform back to the time domain.
        5. Multiply by the composite window.
        6. Overlap-add the processed frame into the output buffer.
    */
    inline void processFrame(bool bypassed)
    {
        float* fptr = fftData.data();
        reassembleFFTFrame(fptr);
        std::memcpy(paddedData.data(), fptr, fftSize * sizeof(float));
        std::fill(paddedData.begin() + fftSize, paddedData.end(), 0.0f);
        // Apply Hann window to the first fftSize samples.
        juce::FloatVectorOperations::multiply(paddedData.data(), windowTable.data(), fftSize);
        if (!bypassed)
        {
            // Forward FFT on padded data.
            fftPadded.performRealOnlyForwardTransform(paddedData.data(), true);
            // --- Spectrum Manipulation Hook ---
            // processSpectrum() is where you can modify each frequency bin.
            processSpectrum(paddedData.data(), paddedNumBins);
            // Inverse FFT to obtain the filtered time-domain signal.
            fftPadded.performRealOnlyInverseTransform(paddedData.data());
        }
        // Apply composite window for proper overlap–add reconstruction.
        juce::FloatVectorOperations::multiply(paddedData.data(), compositeWindow.data(), fftSize);
        // Overlap–add: add processed frame into the output circular buffer.
        if (pos > 0)
            juce::FloatVectorOperations::add(outputFifo.data(), paddedData.data() + fftSize - pos, pos);
        int remaining = fftSize - pos;
        if (remaining > 0)
            juce::FloatVectorOperations::add(outputFifo.data() + pos, paddedData.data(), remaining);
    }

    // --- processSpectrum() ---
    /*
      A basic example of spectral processing: a lowpass filter.
      For each frequency bin:
        - Compute magnitude and phase.
        - Zero the magnitude if the bin exceeds the lowpass cutoff.
      To implement your own effects, modify the logic here:
        • To change amplitude, adjust 'mag'.
        • To change phase, modify 'phase'.
    */
    inline void processSpectrum(float* data, int nBins)
    {
        auto* cdata = reinterpret_cast<std::complex<float>*>(data);
        int cutoffBin = frequencyToBin(lowpassCutoffFrequency);
        for (int i = 0; i < nBins; ++i)
        {
            float mag = std::abs(cdata[i]);
            float phase = std::arg(cdata[i]);

            // Example lowpass behavior: zero bins above cutoff.
            if (i > cutoffBin)
                mag = 0.0f;
 
            cdata[i] = std::polar(mag, phase);
        }
    }

    // --- frequencyToBin() ---
    /*
      Converts a frequency (Hz) to the corresponding FFT bin index.
      Calculation is based on the padded FFT size and current sample rate.
    */
    inline int frequencyToBin(float frequency) const
    {
        int bin = static_cast<int>((frequency * paddedSize) / currentSampleRate + 0.5f);
        return std::min(bin, paddedNumBins - 1);
    }
};
