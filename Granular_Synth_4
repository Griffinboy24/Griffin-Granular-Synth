#pragma once

#include <JuceHeader.h>
#include <array>
#include <vector>
#include <cmath>
#include <algorithm>
#include <random>
#include <limits>
#include <new>

namespace project
{

#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

#if defined(_MSC_VER)
#define FORCE_INLINE __forceinline
#else
#define FORCE_INLINE inline __attribute__((always_inline))
#endif

    using namespace juce;
    using namespace hise;
    using namespace scriptnode;

    enum class EnvelopeMode { Parabolic, Triangle, ASR };

    struct GrainEssence
    {
        double pitchOffsetCents = 0.0;
        float  volumeMult = 1.0f;
        float  panning = 0.0f;
        int    gapAdjustment = 0;
        float  sizeMult = 1.0f;
        float  startOffsetInSamples = 0.0f; // Renamed for clarity - represents the final calculated start offset
        bool   reverse = false;
    };

    struct ParabolicEnvelopeState
    {
        float amplitude = 0.f, slope = 0.f, curve = 0.f;
        bool finished = false;
        int totalSamples = 0, samplesDone = 0;
        bool isPunchy = false;
        int segmentIndex = 0, nextBoundaryVal = 0;
        float finalAmplitude = 0.f;
        void initNormal(float gA, int durSamples)
        {
            finished = false; totalSamples = durSamples; samplesDone = 0; isPunchy = false; segmentIndex = 0;
            if (durSamples < 1) { amplitude = 0.f; slope = 0.f; curve = 0.f; finished = true; return; }
            amplitude = 0.f;
            double rdur = 1.0 / double(durSamples);
            double rdur2 = rdur * rdur;
            slope = float(4.0 * gA * (rdur - rdur2));
            curve = float(-8.0 * gA * rdur2);
            nextBoundaryVal = durSamples;
        }
        void initPunchy(float gA, int durSamples)
        {
            finished = false; totalSamples = durSamples; samplesDone = 0; isPunchy = true; segmentIndex = 0;
            finalAmplitude = gA;
            if (durSamples < 2) { amplitude = 0.f; slope = 0.f; curve = 0.f; finished = true; return; }
            int half = durSamples / 2; if (half < 1) half = 1;
            amplitude = gA; slope = 0.f; curve = 0.f; nextBoundaryVal = half;
        }
        int nextBoundary(int maximum) const { return std::min(maximum, nextBoundaryVal); }
        FORCE_INLINE float synthesize()
        {
            float current = amplitude;
            amplitude += slope;
            slope += curve;
            ++samplesDone;
            return current;
        }
        FORCE_INLINE void checkBoundary(int samplesPassed)
        {
            nextBoundaryVal -= samplesPassed;
            if (nextBoundaryVal <= 0 && !finished)
                advanceSegment();
        }
        FORCE_INLINE void advanceSegment()
        {
            if (!isPunchy) { finished = true; return; }
            if (segmentIndex == 0)
            {
                segmentIndex = 1;
                int half = totalSamples - (totalSamples / 2);
                if (half < 1) { finished = true; return; }
                float H = float(half);
                slope = -finalAmplitude / (H * H);
                curve = -(2.f * finalAmplitude) / (H * H);
                nextBoundaryVal = half;
            }
            else { finished = true; }
        }
        bool atEnd() const { return finished; }
    };

    struct LinearEnvelopeState
    {
        float amplitude = 0.f, slope = 0.f;
        bool finished = false, isPunchy = false;
        int segmentIndex = 0, totalSamples = 0, samplesDone = 0, nextBoundaryVal = 0;
        float grainAmp = 0.f;
        void initNormal(float gA, int durSamples)
        {
            finished = false; isPunchy = false; segmentIndex = 0; totalSamples = durSamples; samplesDone = 0; grainAmp = gA;
            if (durSamples < 2) { amplitude = 0.f; slope = 0.f; finished = true; return; }
            int half = durSamples / 2; if (half < 1) half = 1;
            amplitude = 0.f;
            slope = gA / float(half);
            nextBoundaryVal = half;
        }
        void initPunchy(float gA, int durSamples)
        {
            finished = false; isPunchy = true; segmentIndex = 0; totalSamples = durSamples; samplesDone = 0; grainAmp = gA;
            if (durSamples < 2) { amplitude = gA; slope = 0.f; finished = true; return; }
            int half = durSamples / 2; if (half < 1) half = 1;
            amplitude = gA;
            slope = 0.f;
            nextBoundaryVal = half;
        }
        int nextBoundary(int maximum) const { return std::min(maximum, nextBoundaryVal); }
        FORCE_INLINE float synthesize()
        {
            float current = amplitude;
            amplitude += slope;
            ++samplesDone;
            return current;
        }
        FORCE_INLINE void checkBoundary(int samplesPassed)
        {
            nextBoundaryVal -= samplesPassed;
            if (nextBoundaryVal <= 0 && !finished)
                advanceSegment();
        }
        FORCE_INLINE void advanceSegment()
        {
            if (!isPunchy)
            {
                if (segmentIndex == 0)
                {
                    segmentIndex = 1;
                    int half = totalSamples - (totalSamples / 2);
                    if (half < 1) { finished = true; return; }
                    amplitude = grainAmp;
                    slope = (0.f - grainAmp) / float(half);
                    nextBoundaryVal = half;
                }
                else { finished = true; }
            }
            else
            {
                if (segmentIndex == 0)
                {
                    segmentIndex = 1;
                    int half = totalSamples - (totalSamples / 2);
                    if (half < 1) { finished = true; return; }
                    slope = (0.f - amplitude) / float(half);
                    nextBoundaryVal = half;
                }
                else { finished = true; }
            }
        }
        bool atEnd() const { return finished; }
    };

    struct ASREnvelopeState
    {
        float amplitude = 0.f, slope = 0.f;
        bool finished = false, isPunchy = false;
        int segmentIndex = 0, totalSamples = 0, samplesDone = 0, nextBoundaryVal = 0;
        float grainAmp = 0.f;
        float attackRatio = 3.f, sustainRatio = 10.f, releaseRatio = 11.f;
        void initNormal(float gA, int durSamples)
        {
            finished = false; isPunchy = false; segmentIndex = 0; totalSamples = durSamples; samplesDone = 0; grainAmp = gA;
            if (durSamples < 2) { amplitude = 0.f; slope = 0.f; finished = true; return; }
            int attackSamples = (int)std::round(float(durSamples) * attackRatio / (attackRatio + sustainRatio + releaseRatio));
            if (attackSamples < 1) attackSamples = 1;
            amplitude = 0.f;
            slope = gA / float(attackSamples);
            nextBoundaryVal = attackSamples;
        }
        void initPunchy(float gA, int durSamples)
        {
            finished = false; isPunchy = true; segmentIndex = 0; totalSamples = durSamples; samplesDone = 0; grainAmp = gA;
            if (durSamples < 2) { amplitude = gA; slope = 0.f; finished = true; return; }
            int attackSamples = (int)std::round(float(durSamples) * attackRatio / (attackRatio + releaseRatio));
            if (attackSamples < 1) attackSamples = 1;
            amplitude = gA;
            slope = 0.f;
            nextBoundaryVal = attackSamples;
        }
        int nextBoundary(int maximum) const { return std::min(maximum, nextBoundaryVal); }
        FORCE_INLINE float synthesize()
        {
            float current = amplitude;
            amplitude += slope;
            ++samplesDone;
            return current;
        }
        FORCE_INLINE void checkBoundary(int samplesPassed)
        {
            nextBoundaryVal -= samplesPassed;
            if (nextBoundaryVal <= 0 && !finished)
                advanceSegment();
        }
        FORCE_INLINE void advanceSegment()
        {
            if (!isPunchy)
            {
                if (segmentIndex == 0)
                {
                    segmentIndex = 1;
                    int sustainSamples = (int)std::round(float(totalSamples) * sustainRatio / (attackRatio + sustainRatio + releaseRatio));
                    if (sustainSamples < 1) { finished = true; return; }
                    amplitude = grainAmp;
                    slope = 0.f;
                    nextBoundaryVal = sustainSamples;
                }
                else if (segmentIndex == 1)
                {
                    segmentIndex = 2;
                    int releaseSamples = totalSamples - (int)std::round(float(totalSamples) * (attackRatio + sustainRatio) / (attackRatio + sustainRatio + releaseRatio));
                    if (releaseSamples < 1) { finished = true; return; }
                    amplitude = grainAmp;
                    slope = (0.f - grainAmp) / float(releaseSamples);
                    nextBoundaryVal = releaseSamples;
                }
                else { finished = true; }
            }
            else
            {
                if (segmentIndex == 0)
                {
                    segmentIndex = 1;
                    int releaseSamples = totalSamples - (int)std::round(float(totalSamples) * attackRatio / (attackRatio + releaseRatio));
                    if (releaseSamples < 1) { finished = true; return; }
                    amplitude = grainAmp;
                    slope = (0.f - amplitude) / float(releaseSamples);
                    nextBoundaryVal = releaseSamples;
                }
                else { finished = true; }
            }
        }
        bool atEnd() const { return finished; }
    };

    static constexpr int FIXED_SHIFT = 16;
    static constexpr int64_t FIXED_ONE = (int64_t)1 << FIXED_SHIFT;
    static constexpr int64_t FIXED_MASK = FIXED_ONE - 1;

    template <bool Punchy>
    FORCE_INLINE int vectorSynthesizeParabolicNoWrap(struct Grain& grain,
        float* outL, float* outR, int blockSize, int bufferLength)
    {
        auto& st = grain.parabState;
        if (st.atEnd() || !grain.active) { grain.active = false; return 0; }
        int processed = 0, remaining = blockSize;
        const float leftGain = 0.5f * (1.f - grain.essence.panning);
        const float rightGain = 0.5f * (1.f + grain.essence.panning);
        const float* srcL = grain.sourceL, * srcR = grain.sourceR;
        while (remaining > 0 && !st.atEnd()) {
            int boundary = st.nextBoundary(remaining);
            if (boundary >= remaining) {
                for (int i = 0; i < remaining; ++i) {
                    float env = st.synthesize();
                    int64_t acc = grain.phaseAcc >> FIXED_SHIFT;
                    int idx = (int)acc;
                    if (!grain.essence.reverse) { if (idx >= (bufferLength - 1)) { st.finished = true; break; } }
                    else { if (idx < 0) { st.finished = true; break; } }
                    float frac = float(grain.phaseAcc & FIXED_MASK) / float(FIXED_ONE);
                    float sampL = srcL[idx] + frac * (srcL[idx + 1] - srcL[idx]);
                    float sampR = srcR[idx] + frac * (srcR[idx + 1] - srcR[idx]);
                    outL[processed + i] += sampL * (env * leftGain);
                    outR[processed + i] += sampR * (env * rightGain);
                    grain.phaseAcc += grain.phaseInc;
                }
                st.checkBoundary(remaining);
                processed += remaining; remaining = 0;
            }
            else {
                for (int i = 0; i < boundary; ++i) {
                    float env = st.synthesize();
                    int64_t acc = grain.phaseAcc >> FIXED_SHIFT;
                    int idx = (int)acc;
                    if (!grain.essence.reverse) { if (idx >= (bufferLength - 1)) { st.finished = true; break; } }
                    else { if (idx < 0) { st.finished = true; break; } }
                    float frac = float(grain.phaseAcc & FIXED_MASK) / float(FIXED_ONE);
                    float sampL = srcL[idx] + frac * (srcL[idx + 1] - srcL[idx]);
                    float sampR = srcR[idx] + frac * (srcR[idx + 1] - srcR[idx]);
                    outL[processed + i] += sampL * (env * leftGain);
                    outR[processed + i] += sampR * (env * rightGain);
                    grain.phaseAcc += grain.phaseInc;
                }
                st.checkBoundary(boundary);
                processed += boundary; remaining -= boundary;
            }
        }
        if (st.atEnd()) grain.active = false;
        return processed;
    }

    static int vectorSynthesizeParabolic(struct Grain& grain,
        float* outL, float* outR, int blockSize, int bufferLength)
    {
        return vectorSynthesizeParabolicNoWrap<false>(grain, outL, outR, blockSize, bufferLength);
    }
    static int vectorSynthesizePunchyParabolic(struct Grain& grain,
        float* outL, float* outR, int blockSize, int bufferLength)
    {
        return vectorSynthesizeParabolicNoWrap<true>(grain, outL, outR, blockSize, bufferLength);
    }

    template <bool Punchy>
    FORCE_INLINE int vectorSynthesizeTriangleNoWrap(struct Grain& grain,
        float* outL, float* outR, int blockSize, int bufferLength)
    {
        auto& st = grain.linearState;
        if (st.atEnd() || !grain.active) { grain.active = false; return 0; }
        int processed = 0, remaining = blockSize;
        const float leftGain = 0.5f * (1.f - grain.essence.panning);
        const float rightGain = 0.5f * (1.f + grain.essence.panning);
        const float* srcL = grain.sourceL, * srcR = grain.sourceR;
        while (remaining > 0 && !st.atEnd()) {
            int boundary = st.nextBoundary(remaining);
            if (boundary >= remaining) {
                for (int i = 0; i < remaining; ++i) {
                    float env = st.synthesize();
                    int64_t acc = grain.phaseAcc >> FIXED_SHIFT;
                    int idx = (int)acc;
                    if (!grain.essence.reverse) { if (idx >= (bufferLength - 1)) { st.finished = true; break; } }
                    else { if (idx < 0) { st.finished = true; break; } }
                    float frac = float(grain.phaseAcc & FIXED_MASK) / float(FIXED_ONE);
                    float sampL = srcL[idx] + frac * (srcL[idx + 1] - srcL[idx]);
                    float sampR = srcR[idx] + frac * (srcR[idx + 1] - srcR[idx]);
                    outL[processed + i] += sampL * (env * leftGain);
                    outR[processed + i] += sampR * (env * rightGain);
                    grain.phaseAcc += grain.phaseInc;
                }
                st.checkBoundary(remaining);
                processed += remaining; remaining = 0;
            }
            else {
                for (int i = 0; i < boundary; ++i) {
                    float env = st.synthesize();
                    int64_t acc = grain.phaseAcc >> FIXED_SHIFT;
                    int idx = (int)acc;
                    if (!grain.essence.reverse) { if (idx >= (bufferLength - 1)) { st.finished = true; break; } }
                    else { if (idx < 0) { st.finished = true; break; } }
                    float frac = float(grain.phaseAcc & FIXED_MASK) / float(FIXED_ONE);
                    float sampL = srcL[idx] + frac * (srcL[idx + 1] - srcL[idx]);
                    float sampR = srcR[idx] + frac * (srcR[idx + 1] - srcR[idx]);
                    outL[processed + i] += sampL * (env * leftGain);
                    outR[processed + i] += sampR * (env * rightGain);
                    grain.phaseAcc += grain.phaseInc;
                }
                st.checkBoundary(boundary);
                processed += boundary; remaining -= boundary;
            }
        }
        if (st.atEnd()) grain.active = false;
        return processed;
    }

    static int vectorSynthesizeTriangle(struct Grain& grain,
        float* outL, float* outR, int blockSize, int bufferLength)
    {
        return vectorSynthesizeTriangleNoWrap<false>(grain, outL, outR, blockSize, bufferLength);
    }
    static int vectorSynthesizePunchyTriangle(struct Grain& grain,
        float* outL, float* outR, int blockSize, int bufferLength)
    {
        return vectorSynthesizeTriangleNoWrap<true>(grain, outL, outR, blockSize, bufferLength);
    }

    template <bool Punchy>
    FORCE_INLINE int vectorSynthesizeASRNoWrap(struct Grain& grain,
        float* outL, float* outR, int blockSize, int bufferLength)
    {
        auto& st = grain.asrState;
        if (st.atEnd() || !grain.active) { grain.active = false; return 0; }
        int processed = 0, remaining = blockSize;
        const float leftGain = 0.5f * (1.f - grain.essence.panning);
        const float rightGain = 0.5f * (1.f + grain.essence.panning);
        const float* srcL = grain.sourceL, * srcR = grain.sourceR;
        while (remaining > 0 && !st.atEnd()) {
            int boundary = st.nextBoundary(remaining);
            if (boundary >= remaining) {
                for (int i = 0; i < remaining; ++i) {
                    float env = st.synthesize();
                    int64_t acc = grain.phaseAcc >> FIXED_SHIFT;
                    int idx = (int)acc;
                    if (!grain.essence.reverse) { if (idx >= (bufferLength - 1)) { st.finished = true; break; } }
                    else { if (idx < 0) { st.finished = true; break; } }
                    float frac = float(grain.phaseAcc & FIXED_MASK) / float(FIXED_ONE);
                    float sampL = srcL[idx] + frac * (srcL[idx + 1] - srcL[idx]);
                    float sampR = srcR[idx] + frac * (srcR[idx + 1] - srcR[idx]);
                    outL[processed + i] += sampL * (env * leftGain);
                    outR[processed + i] += sampR * (env * rightGain);
                    grain.phaseAcc += grain.phaseInc;
                }
                st.checkBoundary(remaining);
                processed += remaining; remaining = 0;
            }
            else {
                for (int i = 0; i < boundary; ++i) {
                    float env = st.synthesize();
                    int64_t acc = grain.phaseAcc >> FIXED_SHIFT;
                    int idx = (int)acc;
                    if (!grain.essence.reverse) { if (idx >= (bufferLength - 1)) { st.finished = true; break; } }
                    else { if (idx < 0) { st.finished = true; break; } }
                    float frac = float(grain.phaseAcc & FIXED_MASK) / float(FIXED_ONE);
                    float sampL = srcL[idx] + frac * (srcL[idx + 1] - srcL[idx]);
                    float sampR = srcR[idx] + frac * (srcR[idx + 1] - srcR[idx]);
                    outL[processed + i] += sampL * (env * leftGain);
                    outR[processed + i] += sampR * (env * rightGain);
                    grain.phaseAcc += grain.phaseInc;
                }
                st.checkBoundary(boundary);
                processed += boundary; remaining -= boundary;
            }
        }
        if (st.atEnd()) grain.active = false;
        return processed;
    }

    static int vectorSynthesizeASR(struct Grain& grain,
        float* outL, float* outR, int blockSize, int bufferLength)
    {
        return vectorSynthesizeASRNoWrap<false>(grain, outL, outR, blockSize, bufferLength);
    }
    static int vectorSynthesizePunchyASR(struct Grain& grain,
        float* outL, float* outR, int blockSize, int bufferLength)
    {
        return vectorSynthesizeASRNoWrap<true>(grain, outL, outR, blockSize, bufferLength);
    }

    struct Grain
    {
        const float* sourceL = nullptr;
        const float* sourceR = nullptr;
        double position = 0.0;
        double duration = 0.0;
        double delta = 0.0;
        double sourceReadLength = 0.0;
        bool active = false;
        float grainAmplitude = 1.0f;
        GrainEssence essence;
        EnvelopeMode envelopeMode = EnvelopeMode::Parabolic;
        bool punchy = false;
        ParabolicEnvelopeState parabState;
        LinearEnvelopeState    linearState;
        ASREnvelopeState       asrState;
        int64_t phaseAcc = 0;
        int64_t phaseInc = 0;

        Grain() noexcept = default;

        Grain(double dur, double d, const std::array<const float*, 2>& src, float amp,
            const GrainEssence& e, int bufferLength, EnvelopeMode envMode, bool isPunchy)
        {
            // ... (Grain constructor - mostly no changes, except using e.startOffsetInSamples directly) ...
            duration = dur; delta = d;
            double centsFact = std::pow(2.0, (e.pitchOffsetCents / 1200.0));
            sourceReadLength = (d * centsFact) * dur;
            duration *= e.sizeMult; sourceReadLength *= e.sizeMult;
            position = 0.0;
            sourceL = src[0]; sourceR = src[1];
            grainAmplitude = amp * e.volumeMult;
            active = true;
            essence = e;
            envelopeMode = envMode;
            punchy = isPunchy;
            int durSamples = (int)std::lround(duration);
            if (durSamples < 1) durSamples = 1;
            switch (envelopeMode)
            {
            case EnvelopeMode::Parabolic:
                if (punchy) parabState.initPunchy(grainAmplitude, durSamples);
                else parabState.initNormal(grainAmplitude, durSamples);
                break;
            case EnvelopeMode::Triangle:
                if (punchy) linearState.initPunchy(grainAmplitude, durSamples);
                else linearState.initNormal(grainAmplitude, durSamples);
                break;
            case EnvelopeMode::ASR:
                if (punchy) asrState.initPunchy(grainAmplitude, durSamples);
                else asrState.initNormal(grainAmplitude, durSamples);
                break;
            }
            double incD = sourceReadLength * FIXED_ONE / durSamples;
            phaseInc = (int64_t)std::llround(incD);
            float offset = e.startOffsetInSamples; // Use the pre-calculated startOffsetInSamples from essence
            if (offset < 0.f) offset = 0.f;
            else if (offset > (float)(bufferLength - 1)) offset = (float)(bufferLength - 1);
            if (e.reverse)
            {
                double absInc = (double)std::llabs(phaseInc);
                double safeStart = (durSamples - 1) * (absInc / (double)FIXED_ONE);
                if (offset < safeStart) offset = (float)safeStart;
            }
            double offs64 = offset * FIXED_ONE;
            phaseAcc = (int64_t)std::llround(offs64);
            if (e.reverse) phaseInc = -phaseInc;
        }

        int vectorSynthesize(float* outL, float* outR, int blockSize, int bufferLength)
        {
            if (!active) return 0;
            switch (envelopeMode)
            {
            case EnvelopeMode::Parabolic:
                return (punchy ? vectorSynthesizeParabolicNoWrap<true>(*this, outL, outR, blockSize, bufferLength)
                    : vectorSynthesizeParabolicNoWrap<false>(*this, outL, outR, blockSize, bufferLength));
            case EnvelopeMode::Triangle:
                return (punchy ? vectorSynthesizeTriangleNoWrap<true>(*this, outL, outR, blockSize, bufferLength)
                    : vectorSynthesizeTriangleNoWrap<false>(*this, outL, outR, blockSize, bufferLength));
            case EnvelopeMode::ASR:
                return (punchy ? vectorSynthesizeASRNoWrap<true>(*this, outL, outR, blockSize, bufferLength)
                    : vectorSynthesizeASRNoWrap<false>(*this, outL, outR, blockSize, bufferLength));
            }
            return 0;
        }
        bool isActive() const { return active; }
    };

    struct Granular_Synth_2_Helper
    {
        static void scheduleGrainNormal(
            bool& /*unusedFirstGrainFlag*/,
            std::array<Grain, 1>& /*punchyGrainPool*/,
            std::array<Grain, 20>& normalGrainPool,
            double grainDuration,
            double baseDelta,
            const std::array<const float*, 2>& sample,
            float grainAmp,
            const GrainEssence& essence,
            int bufferLen,
            int /*unusedAtt*/,
            int /*unusedRel*/,
            EnvelopeMode envMode,
            bool punchy)
        {
            for (auto& g : normalGrainPool)
            {
                if (!g.isActive())
                {
                    new (&g) Grain(grainDuration, baseDelta, sample, grainAmp, essence, bufferLen, envMode, punchy);
                    break;
                }
            }
        }
        static void scheduleGrainPunchy(
            bool& firstGrainScheduled,
            std::array<Grain, 1>& punchyGrainPool,
            std::array<Grain, 20>& normalGrainPool,
            double grainDuration,
            double baseDelta,
            const std::array<const float*, 2>& sample,
            float grainAmp,
            const GrainEssence& essence,
            int bufferLen,
            int /*unusedAtt*/,
            int /*unusedRel*/,
            EnvelopeMode envMode,
            bool /*ignored*/)
        {
            if (!firstGrainScheduled)
            {
                for (auto& g : punchyGrainPool)
                {
                    if (!g.isActive())
                    {
                        new (&g) Grain(grainDuration, baseDelta, sample, grainAmp, essence, bufferLen, envMode, true);
                        firstGrainScheduled = true;
                        break;
                    }
                }
            }
            else
            {
                for (auto& g : normalGrainPool)
                {
                    if (!g.isActive())
                    {
                        new (&g) Grain(grainDuration, baseDelta, sample, grainAmp, essence, bufferLen, envMode, false);
                        break;
                    }
                }
            }
        }
    };

    using ScheduleGrainFunction = void(*)(bool&, std::array<Grain, 1>&, std::array<Grain, 20>&,
        double, double, const std::array<const float*, 2>&, float, const GrainEssence&, int, int, int, EnvelopeMode, bool);

    template <int NV>
    struct Granular_Synth : public data::base
    {
        SNEX_NODE(Granular_Synth);
        struct MetadataClass { SN_NODE_ID("Granular_Synth"); };

        static constexpr bool isModNode() { return false; }
        static constexpr bool isPolyphonic() { return NV > 1; }
        static constexpr bool hasTail() { return true; }
        static constexpr bool isSuspendedOnSilence() { return false; }
        static constexpr int getFixChannelAmount() { return 2; }

        static constexpr int NumTables = 0;
        static constexpr int NumSliderPacks = 0;
        static constexpr int NumAudioFiles = 1;
        static constexpr int NumFilters = 0;
        static constexpr int NumDisplayBuffers = 0;

        std::vector<Grain*> activeGrains;

        struct Voice
        {
            int midiNote = 60;
            bool isActive = false;
            float velocity = 1.0f;
            std::array<Grain, 1>  punchyGrainPool;
            std::array<Grain, 20> normalGrainPool;
            int grainSchedulerCounter = 0;
            double grainSchedulerInterval = 0.0;
            double modPhase = 0.0;
            bool firstGrainScheduled = false;
            double scanDirection = 1.0;
            void reset(int note, float vel, int, int intervalSamples)
            {
                midiNote = note;
                velocity = vel;
                isActive = true;
                firstGrainScheduled = false;
                for (auto& g : punchyGrainPool) g.active = false;
                for (auto& g : normalGrainPool) g.active = false;
                grainSchedulerCounter = 0;
                grainSchedulerInterval = double(intervalSamples);
                modPhase = 0.0; scanDirection = 1.0;
            }
        };

        PolyData<Voice, NV> voices;
        ExternalData sampleData;
        AudioBuffer<float> sampleBuffer;
        std::array<const float*, 2> sample{ nullptr, nullptr };

        std::array<float, 128> pitchRatios{};
        double sampleRate = 44100.0;
        double sampleRateRatio = 1.0;
        int grainSizeInSamples = 0;
        int grainIntervalInSamples = 0;
        double globalPitchOffsetFactor = 1.0;

        float  sampleStartPercent = 0.0f;     // Renamed from grainStartPercent
        float  sampleStartOffsetInSamples = 0.0f; // Renamed to sampleStartOffsetInSamples to match percent name
        float  startOffsetPercent = 0.0f;     // Renamed from grainInitialStartOffsetPercent - Represents the relative offset within the scan range
        float  startOffsetInSamples = 0.0f;     // Added - to hold the calculated sample offset based on startOffsetPercent

        float  scanEndPercent = 1.0f;
        double grainPitchOffsetSemitones = 0.0;
        ModValue gate;

        std::mt19937 randomGen;

        double grainOffsetCentsRange = 10.0;
        float  grainVolumeMin = 0.8f;
        float  grainPanRange = 0.25f;
        double grainGapAdjustmentMaxSec = 0.25;
        float  grainSizeRandom = 0.0f;
        double grainSizeMS = 1000.0;
        double grainIntervalMS = 1500.0;
        float  grainSpray = 0.0f;
        float  grainSprayMode = 0.0f;
        bool   startModEnabled = false;
        double startModTimeSec = 0.0;

        int raisedCosAttackSamples = 0;
        int raisedCosReleaseSamples = 0;

        bool punchyMode = false;
        int envelopeType = 0;
        float pitchRandMode = 0.0f;
        float reverseChance = 0.0f;

        ScheduleGrainFunction scheduleGrainFn = nullptr;

        std::vector<float> tempBlockOutL;
        std::vector<float> tempBlockOutR;

        void setExternalData(const ExternalData& ed, int)
        {
            sampleData = ed;
            AudioSampleBuffer tempBuf = ed.toAudioSampleBuffer();
            int numSamples = tempBuf.getNumSamples();
            int numChannels = tempBuf.getNumChannels();
            if (numSamples <= 0)
            {
                int fallbackLen = 8;
                int chs = (numChannels > 0 ? numChannels : 2);
                AudioSampleBuffer fallback(chs, fallbackLen);
                fallback.clear();
                sampleBuffer.makeCopyOf(fallback, true);
            }
            else
            {
                sampleBuffer.makeCopyOf(tempBuf, true);
            }
            sample[0] = sampleBuffer.getReadPointer(0);
            if (numChannels > 1)
                sample[1] = sampleBuffer.getReadPointer(1);
            else
                sample[1] = sample[0];
            updateDerivedParameters();
        }

        void updateDerivedParameters()
        {
            grainSizeInSamples = (int)std::lround((grainSizeMS / 1000.0) * sampleRate);
            grainIntervalInSamples = (int)std::lround((grainIntervalMS / 1000.0) * sampleRate);
            sampleRateRatio = (sampleData.sampleRate > 0 ? sampleData.sampleRate : 44100.0) / sampleRate;
            globalPitchOffsetFactor = grainPitchOffsetSemitones;
            int currentSampleLength = sampleBuffer.getNumSamples();
            if (currentSampleLength < 1) currentSampleLength = 1;
            sampleStartOffsetInSamples = sampleStartPercent * float(currentSampleLength - 1); // Calculate sample start offset
            startOffsetInSamples = startOffsetPercent * float(currentSampleLength - 1); // Calculate start offset in samples (now relative to sample length for parameter update)
            raisedCosAttackSamples = (int)std::lround(0.02 * sampleRate);
            raisedCosReleaseSamples = (int)std::lround(0.02 * sampleRate);
        }

        void reset()
        {
            for (auto& voice : voices)
                voice.isActive = false;
        }

        void prepare(PrepareSpecs specs)
        {
            sampleRate = specs.sampleRate;
            initPitchRatios();
            updateDerivedParameters();
            voices.prepare(specs);
            activeGrains.clear();
            activeGrains.reserve(NV * 21);
            std::random_device rd;
            randomGen.seed(rd());
            if (punchyMode)
                scheduleGrainFn = &Granular_Synth_2_Helper::scheduleGrainPunchy;
            else
                scheduleGrainFn = &Granular_Synth_2_Helper::scheduleGrainNormal;
        }

        void handleHiseEvent(HiseEvent& e)
        {
            if (e.isNoteOn())
            {
                auto& voice = voices.get();
                voice.reset(e.getNoteNumber(), e.getFloatVelocity(), grainSizeInSamples, grainIntervalInSamples);
            }
        }

        template <typename ProcessDataType>
        void process(ProcessDataType& data)
        {
            DataReadLock sl(this->sampleData);
            auto& fixData = data.template as<ProcessData<getFixChannelAmount()>>();
            auto audioBlock = fixData.toAudioBlock();
            auto* leftChannel = audioBlock.getChannelPointer(0);
            auto* rightChannel = audioBlock.getChannelPointer(1);
            int totalSamples = data.getNumSamples();
            if (sampleBuffer.getNumSamples() == 0)
            {
                audioBlock.clear();
                return;
            }
            std::fill(leftChannel, leftChannel + totalSamples, 0.f);
            std::fill(rightChannel, rightChannel + totalSamples, 0.f);
            if ((int)tempBlockOutL.size() < totalSamples)
            {
                tempBlockOutL.resize(totalSamples, 0.f);
                tempBlockOutR.resize(totalSamples, 0.f);
            }
            const int sampleLen = sampleBuffer.getNumSamples();
            int globalOffset = 0;
            while (globalOffset < totalSamples)
            {
                int nextEvent = totalSamples - globalOffset;
                for (auto& voice : voices)
                {
                    if (!voice.isActive) continue;
                    nextEvent = std::min(nextEvent, voice.grainSchedulerCounter);
                    for (auto& grain : voice.normalGrainPool)
                    {
                        if (grain.active)
                        {
                            int remain = (int)(grain.duration - grain.position);
                            nextEvent = std::min(nextEvent, remain);
                        }
                    }
                    for (auto& grain : voice.punchyGrainPool)
                    {
                        if (grain.active)
                        {
                            int remain = (int)(grain.duration - grain.position);
                            nextEvent = std::min(nextEvent, remain);
                        }
                    }
                }
                if (nextEvent < 1)
                    nextEvent = 1;
                std::fill(tempBlockOutL.begin(), tempBlockOutL.begin() + nextEvent, 0.f);
                std::fill(tempBlockOutR.begin(), tempBlockOutR.begin() + nextEvent, 0.f);
                activeGrains.clear();
                for (auto& voice : voices)
                {
                    if (!voice.isActive) continue;
                    for (auto& g : voice.punchyGrainPool)
                        if (g.active) activeGrains.push_back(&g);
                    for (auto& g : voice.normalGrainPool)
                        if (g.active) activeGrains.push_back(&g);
                }
                for (auto* gptr : activeGrains)
                {
                    int n = gptr->vectorSynthesize(tempBlockOutL.data(), tempBlockOutR.data(), nextEvent, sampleLen);
                    gptr->position += n;
                }
                for (int i = 0; i < nextEvent; ++i)
                {
                    leftChannel[globalOffset + i] += tempBlockOutL[i];
                    rightChannel[globalOffset + i] += tempBlockOutR[i];
                }
                for (auto& voice : voices)
                {
                    if (!voice.isActive) continue;
                    voice.grainSchedulerCounter -= nextEvent;
                    while (voice.grainSchedulerCounter <= 0)
                    {
                        double baseDelta = pitchRatios[voice.midiNote] * sampleRateRatio * globalPitchOffsetFactor;
                        double grainDuration = (double)grainSizeInSamples;
                        GrainEssence essence;
                        {
                            if (pitchRandMode < 0.5f)
                            {
                                std::uniform_real_distribution<double> pitchDist(-grainOffsetCentsRange, grainOffsetCentsRange);
                                essence.pitchOffsetCents = pitchDist(randomGen);
                            }
                            else
                            {
                                std::uniform_real_distribution<double> chanceDist(0.0, 1.0);
                                double chance = chanceDist(randomGen);
                                if (chance < (grainOffsetCentsRange / 100.0))
                                    essence.pitchOffsetCents = 1200.0;
                                else
                                    essence.pitchOffsetCents = 0.0;
                            }
                            std::uniform_real_distribution<float> volDist(grainVolumeMin, 1.f);
                            essence.volumeMult = volDist(randomGen);
                            std::uniform_real_distribution<float> panDist(-grainPanRange, grainPanRange);
                            essence.panning = panDist(randomGen);
                            std::uniform_int_distribution<int> gapDist(0, (int)std::lround(grainGapAdjustmentMaxSec * sampleRate));
                            essence.gapAdjustment = gapDist(randomGen);
                            std::uniform_real_distribution<float> sizeDist((1.f - grainSizeRandom), 1.f);
                            essence.sizeMult = sizeDist(randomGen);

                            float sampleStartOffset = sampleStartPercent * float(sampleLen - 1);
                            float scanEndOffset = scanEndPercent * float(sampleLen - 1);
                            float scanRange = scanEndOffset - sampleStartOffset;

                            float finalStartOffset = sampleStartOffset; // Start from Sample Start

                            if (startModEnabled && startModTimeSec > 0.00001)
                            {
                                int samplesPassed = grainIntervalInSamples + essence.gapAdjustment;
                                double timeSec = (double)samplesPassed / sampleRate;
                                double cycleTime = startModTimeSec;
                                double increment = timeSec / cycleTime;
                                voice.modPhase += increment * voice.scanDirection;
                                if (voice.modPhase >= 1.0)
                                {
                                    voice.modPhase = 2.0 - voice.modPhase;
                                    voice.scanDirection = -1.0;
                                }
                                else if (voice.modPhase <= 0.0)
                                {
                                    voice.modPhase = -voice.modPhase;
                                    voice.scanDirection = 1.0;
                                }
                                float curPercent = (float)voice.modPhase;
                                finalStartOffset += scanRange * curPercent; // Modulate within the scan range
                            }

                            finalStartOffset += startOffsetPercent * scanRange; // Apply Start Offset as percentage of scan range

                            if (grainSpray > 0.f)
                            {
                                std::uniform_real_distribution<float> rdist(0.f, 1.f);
                                float rnd = rdist(randomGen);
                                float left = -grainSprayMode * grainSpray * float(sampleLen);
                                float range = grainSpray * (1.f + grainSprayMode) * float(sampleLen);
                                float offset = left + rnd * range;
                                finalStartOffset += offset;
                            }
                            if (finalStartOffset < 0.f)
                                finalStartOffset = 0.f;
                            essence.startOffsetInSamples = finalStartOffset;
                            std::uniform_real_distribution<double> revDist(0.0, 1.0);
                            essence.reverse = (revDist(randomGen) < reverseChance);
                        }
                        float grainAmp = voice.velocity;
                        EnvelopeMode envMode = (envelopeType == 0 ? EnvelopeMode::Parabolic :
                            (envelopeType == 1 ? EnvelopeMode::Triangle : EnvelopeMode::ASR));
                        scheduleGrainFn(
                            voice.firstGrainScheduled,
                            voice.punchyGrainPool,
                            voice.normalGrainPool,
                            grainDuration,
                            baseDelta,
                            sample,
                            grainAmp,
                            essence,
                            sampleLen,
                            raisedCosAttackSamples,
                            raisedCosReleaseSamples,
                            envMode,
                            punchyMode ? true : false
                        );
                        voice.grainSchedulerCounter += (grainIntervalInSamples + essence.gapAdjustment);
                    }
                }
                globalOffset += nextEvent;
            }
        }

        template <typename FrameDataType>
        void processFrame(FrameDataType&) {}

        template <int P>
        void setParameter(double v)
        {
            if constexpr (P == 0) { grainPitchOffsetSemitones = v; updateDerivedParameters(); }
            else if constexpr (P == 1) { grainOffsetCentsRange = v; }
            else if constexpr (P == 2) { pitchRandMode = (float)v; }
            else if constexpr (P == 3) { grainVolumeMin = 1.f - (float)v; }
            else if constexpr (P == 4) { grainPanRange = (float)v; }
            else if constexpr (P == 5) { grainSizeMS = v; updateDerivedParameters(); }
            else if constexpr (P == 6) { grainIntervalMS = v; updateDerivedParameters(); }
            else if constexpr (P == 7) { grainGapAdjustmentMaxSec = v; }
            else if constexpr (P == 8) { grainSizeRandom = (float)v; }
            else if constexpr (P == 9) { sampleStartPercent = (float)v; updateDerivedParameters(); } // Renamed parameter
            else if constexpr (P == 10) { scanEndPercent = (float)v; }
            else if constexpr (P == 11) { startModTimeSec = v; }
            else if constexpr (P == 12) { startModEnabled = (v >= 0.5); }
            else if constexpr (P == 13) { grainSpray = (float)v; }
            else if constexpr (P == 14) { grainSprayMode = (v >= 0.5) ? 1.f : 0.f; }
            else if constexpr (P == 15)
            {
                bool oldPunchy = punchyMode;
                punchyMode = (v >= 0.5);
                if (oldPunchy != punchyMode)
                {
                    if (punchyMode)
                        scheduleGrainFn = &Granular_Synth_2_Helper::scheduleGrainPunchy;
                    else
                        scheduleGrainFn = &Granular_Synth_2_Helper::scheduleGrainNormal;
                }
            }
            else if constexpr (P == 16) { envelopeType = (int)std::round(v * 2.0f); }
            else if constexpr (P == 17) { reverseChance = (float)v; }
            else if constexpr (P == 18) { startOffsetPercent = (float)v; updateDerivedParameters(); } // Renamed parameter and update derived params
        }

        void createParameters(ParameterDataList& data)
        {
            // ... (Parameter creation - mostly renamed parameters) ...
            {
                parameter::data pitchOffsetParam("Pitch (multiplier)", { 0.25, 4.0, 0.01 });
                registerCallback<0>(pitchOffsetParam);
                pitchOffsetParam.setDefaultValue(1.0);
                data.add(std::move(pitchOffsetParam));
            }
            {
                parameter::data offsetParam("Rand Pitch Detune", { 0.0, 100.0, 0.1 });
                registerCallback<1>(offsetParam);
                offsetParam.setDefaultValue(0.0);
                data.add(std::move(offsetParam));
            }
            {
                parameter::data pitchRandModeParam("Pitch Rand Mode", { 0.0, 1.0, 0.001 });
                registerCallback<2>(pitchRandModeParam);
                pitchRandModeParam.setDefaultValue(0.0);
                data.add(std::move(pitchRandModeParam));
            }
            {
                parameter::data volMinParam("Rand Vol", { 0.0, 0.8, 0.01 });
                registerCallback<3>(volMinParam);
                volMinParam.setDefaultValue(0.0);
                data.add(std::move(volMinParam));
            }
            {
                parameter::data panParam("Rand Pan", { 0.0, 1.0, 0.01 });
                registerCallback<4>(panParam);
                panParam.setDefaultValue(0.0);
                data.add(std::move(panParam));
            }
            {
                parameter::data sizeParam("Grain Size (ms)", { 10.0, 2000.0, 1.0 });
                registerCallback<5>(sizeParam);
                sizeParam.setDefaultValue(1000.0);
                data.add(std::move(sizeParam));
            }
            {
                parameter::data intervalParam("Grain Interval (ms)", { 10.0, 3000.0, 1.0 });
                registerCallback<6>(intervalParam);
                intervalParam.setDefaultValue(1500.0);
                data.add(std::move(intervalParam));
            }
            {
                parameter::data gapParam("Rand Interval (sec)", { 0.0, 1.0, 0.01 });
                registerCallback<7>(gapParam);
                gapParam.setDefaultValue(0.0);
                data.add(std::move(gapParam));
            }
            {
                parameter::data sizeRandomParam("Rand Size", { 0.0, 0.8, 0.01 });
                registerCallback<8>(sizeRandomParam);
                sizeRandomParam.setDefaultValue(0.0);
                data.add(std::move(sizeRandomParam));
            }
            {
                parameter::data sampleStartParam("Sample Start", { 0.0, 1.0, 0.001 }); // Renamed parameter
                registerCallback<9>(sampleStartParam);
                sampleStartParam.setDefaultValue(0.0);
                data.add(std::move(sampleStartParam));
            }
            {
                parameter::data scanEndParam("Scan End", { 0.0, 1.0, 0.001 });
                registerCallback<10>(scanEndParam);
                scanEndParam.setDefaultValue(1.0);
                data.add(std::move(scanEndParam));
            }
            {
                parameter::data startModTime("Scan Time (sec)", { 0.0, 20.0, 0.001 });
                registerCallback<11>(startModTime);
                startModTime.setDefaultValue(0.0);
                data.add(std::move(startModTime));
            }
            {
                parameter::data startModEnable("Scan Enable", { 0.0, 1.0, 1.0 });
                registerCallback<12>(startModEnable);
                startModEnable.setDefaultValue(0.0);
                data.add(std::move(startModEnable));
            }
            {
                parameter::data sprayParam("Spray", { 0.0, 1.0, 0.01 });
                registerCallback<13>(sprayParam);
                sprayParam.setDefaultValue(0.0);
                data.add(std::move(sprayParam));
            }
            {
                parameter::data sprayModeParam("Spray Mode", { 0.0, 1.0, 1.0 });
                registerCallback<14>(sprayModeParam);
                sprayModeParam.setDefaultValue(0.0);
                data.add(std::move(sprayModeParam));
            }
            {
                parameter::data punchyParam("Punchy Mode", { 0.0, 1.0, 1.0 });
                registerCallback<15>(punchyParam);
                punchyParam.setDefaultValue(0.0);
                data.add(std::move(punchyParam));
            }
            {
                parameter::data envTypeParam("Envelope Type", { 0.0, 1.0, 0.5f });
                registerCallback<16>(envTypeParam);
                envTypeParam.setDefaultValue(0.0);
                data.add(std::move(envTypeParam));
            }
            {
                parameter::data reverseChanceParam("Reverse Chance", { 0.0, 1.0, 0.01 });
                registerCallback<17>(reverseChanceParam);
                reverseChanceParam.setDefaultValue(0.0);
                data.add(std::move(reverseChanceParam));
            }
            {
                parameter::data startOffsetParam("Start Offset", { 0.0, 1.0, 0.001 }); // Renamed parameter
                registerCallback<18>(startOffsetParam);
                startOffsetParam.setDefaultValue(0.0);
                data.add(std::move(startOffsetParam));
            }
        }

        void initPitchRatios()
        {
            for (int i = 0; i < 128; ++i)
                pitchRatios[i] = std::pow(2.0f, float(i - 60) / 12.0f);
        }
    };

} // namespace project
