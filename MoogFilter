#pragma once
#include <JuceHeader.h>
#include <cmath>
#include "src\eigen-master\Eigen\Dense"

namespace project
{
    using namespace juce;
    using namespace hise;
    using namespace scriptnode;

    template <int NV>
    struct Griffin_OBFilter : public data::base
    {
        SNEX_NODE(Griffin_OBFilter);

        struct MetadataClass { SN_NODE_ID("Griffin_OBFilter"); };

        static constexpr bool isModNode() { return false; }
        static constexpr bool isPolyphonic() { return NV > 1; }
        static constexpr bool hasTail() { return true; }
        static constexpr bool isSuspendedOnSilence() { return false; }
        static constexpr int  getFixChannelAmount() { return 2; }

        static constexpr int  NumTables = 0;
        static constexpr int  NumSliderPacks = 0;
        static constexpr int  NumAudioFiles = 0;
        static constexpr int  NumFilters = 0;
        static constexpr int  NumDisplayBuffers = 0;

        // Raw parameter values
        float cutoffFrequency = 1000.0f;
        float resonance = 0.0f;
        float keytrackAmount = 1.0f;
        float sampleRate = 44100.0f;

        // Smoothed parameter objects (per-sample smoothing)
        SmoothedValue<float> cutoffSmooth;
        SmoothedValue<float> resonanceSmooth;
        SmoothedValue<float> keytrackSmooth;

        void prepare(PrepareSpecs specs)
        {
            sampleRate = specs.sampleRate;
            filtersLeft.prepare(specs);
            filtersRight.prepare(specs);

            for (auto& v : filtersLeft)
                v.prepare(sampleRate);
            for (auto& v : filtersRight)
                v.prepare(sampleRate);

            cutoffSmooth.reset(sampleRate, 0.01);    // 10ms smoothing time
            resonanceSmooth.reset(sampleRate, 0.01);
            keytrackSmooth.reset(sampleRate, 0.01);

            cutoffSmooth.setCurrentAndTargetValue(cutoffFrequency);
            resonanceSmooth.setCurrentAndTargetValue(resonance);
            keytrackSmooth.setCurrentAndTargetValue(keytrackAmount);
        }

        void reset()
        {
            for (auto& v : filtersLeft)
                v.reset();
            for (auto& v : filtersRight)
                v.reset();
        }

        // Process each sample using per-sample smoothed parameters
        template <typename ProcessDataType>
        void process(ProcessDataType& data)
        {
            auto& fixData = data.template as<ProcessData<getFixChannelAmount()>>();
            auto audioBlock = fixData.toAudioBlock();

            float* leftCh = audioBlock.getChannelPointer(0);
            float* rightCh = audioBlock.getChannelPointer(1);
            int numSamples = static_cast<int>(data.getNumSamples());

            for (int i = 0; i < numSamples; ++i)
            {
                float cVal = cutoffSmooth.getNextValue();
                float rVal = resonanceSmooth.getNextValue();
                float kVal = keytrackSmooth.getNextValue();

                for (auto& v : filtersLeft)
                {
                    v.setCutoff(cVal);
                    v.setResonance(rVal);
                    v.setKeytrack(kVal);
                    v.applyChangesIfNeeded();
                }
                for (auto& v : filtersRight)
                {
                    v.setCutoff(cVal);
                    v.setResonance(rVal);
                    v.setKeytrack(kVal);
                    v.applyChangesIfNeeded();
                }

                float inL = leftCh[i];
                float inR = rightCh[i];

                for (auto& v : filtersLeft)
                    inL = v.processSample(inL);
                for (auto& v : filtersRight)
                    inR = v.processSample(inR);

                leftCh[i] = inL;
                rightCh[i] = inR;
            }
        }

        template <typename FrameDataType>
        void processFrame(FrameDataType& data) {}

        //=========================================================================
        // AudioEffect: Moog-style voice-level filter with state-space equations
        //=========================================================================
        class AudioEffect
        {
        public:
            inline void prepare(float fs)
            {
                sampleRate = fs;
                baseCutoff = 1000.0f;
                resonance = 0.0f;
                keytrackAmount = 1.0f;
                storedNote = 60;
                reset();
                dirtyFlags = 0;
                updateAll();
            }

            inline void reset()
            {
                x = Eigen::Vector4f::Zero();
            }

            enum Dirty : uint32_t
            {
                changedCutoff = 1 << 0,
                changedResonance = 1 << 1,
                changedKeytrack = 1 << 2,
                changedNote = 1 << 3
            };

            inline void setCutoff(float c)
            {
                baseCutoff = c;
                dirtyFlags |= changedCutoff;
            }
            inline void setResonance(float r)
            {
                resonance = r;
                dirtyFlags |= changedResonance;
            }
            inline void setKeytrack(float kt)
            {
                keytrackAmount = kt;
                dirtyFlags |= changedKeytrack;
            }
            inline void setNoteNumber(int n)
            {
                storedNote = n;
                dirtyFlags |= changedNote;
            }
            inline void applyChangesIfNeeded()
            {
                if (dirtyFlags != 0)
                    updateAll();
            }

            // Process a single sample: state update and output calculation
            inline float processSample(float input)
            {
                Eigen::Vector4f temp = N * x + gB * input;
                Eigen::Vector4f newX = MInv * temp;
                float out = C.dot(newX) * gainComp;
                x = newX;
                return out;
            }

        private:
            // Update matrices if any parameter changed
            inline void updateAll()
            {
                float semitones = (static_cast<float>(storedNote) - 60.0f) * keytrackAmount;
                float noteFactor = std::exp2f(0.0833333f * semitones);
                float fc = baseCutoff * noteFactor;
                if (fc < 20.0f)
                    fc = 20.0f;
                float limit = 0.49f * sampleRate;
                if (fc > limit)
                    fc = limit;

                float norm = fc / sampleRate;
                float warped = std::tan(MathConstants<float>::pi * norm);
                g = 2.0f * warped;

                buildContinuousTimeSystem();
                buildDiscreteTimeMatrices();
                MInv = M.inverse();
                C = Ccont;

                if (dirtyFlags & changedResonance)
                {
                    // Compute gain compensation so that resonance = 3 yields an 9 dB boost
                    gainComp = std::pow(10.0f, (std::sqrt(resonance / 3.0f) * 9.0f) / 20.0f);
                }

                dirtyFlags = 0;
            }

            // Build the continuous-time system using a fixed damping (r = 1.0)
            inline void buildContinuousTimeSystem()
            {
                Acont.setZero();
                Bcont.setZero();
                Ccont.setZero();

                float r = 1.0f;
                Acont(0, 0) = -2.0f * r;
                Acont(0, 1) = -1.0f;
                Acont(0, 3) = -resonance;

                Acont(1, 0) = 1.0f;

                Acont(2, 1) = 1.0f;
                Acont(2, 2) = -2.0f * r;
                Acont(2, 3) = -1.0f;

                Acont(3, 2) = 1.0f;

                Bcont(0) = 1.0f;
                Ccont(3) = 1.0f;
            }

            // Discretize the continuous system using the TPT transform
            inline void buildDiscreteTimeMatrices()
            {
                Eigen::Matrix4f gA = g * Acont;
                M = Eigen::Matrix4f::Identity() - gA;
                N = Eigen::Matrix4f::Identity() + gA;
                gB = g * Bcont;
            }

            float sampleRate = 44100.0f;
            float baseCutoff = 1000.0f;
            float resonance = 0.0f;
            float keytrackAmount = 1.0f;
            int storedNote = 60;
            float g = 0.0f;

            Eigen::Vector4f x = Eigen::Vector4f::Zero();
            Eigen::Matrix4f Acont = Eigen::Matrix4f::Zero();
            Eigen::Vector4f Bcont = Eigen::Vector4f::Zero();
            Eigen::Vector4f Ccont = Eigen::Vector4f::Zero();
            Eigen::Matrix4f M = Eigen::Matrix4f::Zero();
            Eigen::Matrix4f N = Eigen::Matrix4f::Zero();
            Eigen::Matrix4f MInv = Eigen::Matrix4f::Zero();
            Eigen::Vector4f gB = Eigen::Vector4f::Zero();
            Eigen::Vector4f C = Eigen::Vector4f::Zero();

            float gainComp = 1.0f;
            uint32_t dirtyFlags = 0;
        };

        template <int P>
        void setParameter(double val)
        {
            if (P == 0)
            {
                cutoffFrequency = static_cast<float>(val);
                cutoffSmooth.setTargetValue(cutoffFrequency);
            }
            else if (P == 1)
            {
                resonance = static_cast<float>(val);
                if (resonance < 0.0f)
                    resonance = 0.0f;
                if (resonance > 3.0f)
                    resonance = 3.0f;
                resonanceSmooth.setTargetValue(resonance);
            }
            else if (P == 2)
            {
                keytrackAmount = static_cast<float>(val);
                keytrackSmooth.setTargetValue(keytrackAmount);
            }
        }

        void createParameters(ParameterDataList& data)
        {
            {
                parameter::data p("Cutoff Frequency", { 20.0, 20000.0, 1.0 });
                registerCallback<0>(p);
                p.setDefaultValue(1000.0f);
                data.add(std::move(p));
            }
            {
                parameter::data p("Resonance", { 0.0, 3.0, 0.01 });
                registerCallback<1>(p);
                p.setDefaultValue(0.0f);
                data.add(std::move(p));
            }
            {
                parameter::data p("Keytrack Amount", { -1.0, 1.0, 0.01 });
                registerCallback<2>(p);
                p.setDefaultValue(1.0f);
                data.add(std::move(p));
            }
        }

        void setExternalData(const ExternalData& data, int index) {}

        void handleHiseEvent(HiseEvent& e)
        {
            if (e.isNoteOn())
            {
                for (auto& v : filtersLeft)
                {
                    v.setNoteNumber(e.getNoteNumber());
                    v.applyChangesIfNeeded();
                }
                for (auto& v : filtersRight)
                {
                    v.setNoteNumber(e.getNoteNumber());
                    v.applyChangesIfNeeded();
                }
            }
        }

    private:
        PolyData<AudioEffect, NV> filtersLeft;
        PolyData<AudioEffect, NV> filtersRight;
    };
}
