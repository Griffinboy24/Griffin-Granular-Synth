#pragma once
#include <JuceHeader.h>

/*
   ===================================================================================================
   Implementation of the exact delay-free 2-SVF + Global Feedback filter method
   from the DAFx-2020 paper by Kurt James Werner & Russell McClellan:

     "Moog Ladder Filter Generalizations Based on State Variable Filters."
     (c) 2020 by K. J. Werner & R. McClellan, licensed under CC BY 3.0

   This version is pinned to the "Moog" configuration by:
   - Setting local damping r = 1.0f.
   - Keeping the global feedback sign negative (gamma0 = -1).
   - Removing the user parameter for local damping.

   This yields the standard Moog ladder behavior in the generalized 2-SVF approach.
   ===================================================================================================
*/

namespace project
{
    using namespace juce;
    using namespace hise;
    using namespace scriptnode;

    template <int NV> // NV = number of voices
    struct Griffin_OBFilter : public data::base
    {
        SNEX_NODE(Griffin_OBFilter);

        struct MetadataClass
        {
            SN_NODE_ID("Griffin_OBFilter");
        };

        static constexpr bool isModNode() { return false; }
        static constexpr bool isPolyphonic() { return NV > 1; }
        static constexpr bool hasTail() { return false; }
        static constexpr bool isSuspendedOnSilence() { return false; }
        static constexpr int  getFixChannelAmount() { return 2; }

        static constexpr int  NumTables = 0;
        static constexpr int  NumSliderPacks = 0;
        static constexpr int  NumAudioFiles = 0;
        static constexpr int  NumFilters = 0;
        static constexpr int  NumDisplayBuffers = 0;

        //================================================================================================
        // Prepare / reset
        //================================================================================================
        void prepare(PrepareSpecs specs)
        {
            sampleRate = specs.sampleRate;
            filtersLeft.prepare(specs);
            filtersRight.prepare(specs);

            for (auto& fl : filtersLeft)
                fl.prepare(sampleRate);

            for (auto& fr : filtersRight)
                fr.prepare(sampleRate);
        }

        void reset()
        {
            for (auto& fl : filtersLeft)  fl.reset();
            for (auto& fr : filtersRight) fr.reset();
        }

        //================================================================================================
        // Audio processing
        //================================================================================================
        template <typename ProcessDataType>
        void process(ProcessDataType& data)
        {
            auto& fixData = data.template as<ProcessData<getFixChannelAmount()>>();
            auto audioBlock = fixData.toAudioBlock();
            float* leftChannelData = audioBlock.getChannelPointer(0);
            float* rightChannelData = audioBlock.getChannelPointer(1);
            int numSamples = (int)data.getNumSamples();

            for (auto& fl : filtersLeft)
                fl.processBlock(leftChannelData, numSamples);

            for (auto& fr : filtersRight)
                fr.processBlock(rightChannelData, numSamples);
        }

        template <typename FrameDataType>
        void processFrame(FrameDataType& data) {}

        //================================================================================================
        // Voice-level effect: Two 2nd-order SVFs + global feedback, EXACT approach
        // With r fixed to 1.0 => "Moog" style local damping, gamma0 = -1 => negative feedback sign.
        //================================================================================================
        class AudioEffect
        {
        public:
            AudioEffect() = default;

            void prepare(float fs)
            {
                sampleRate = fs;
                baseCutoff = 1000.0f;
                resonance = 0.0f;
                keytrackAmount = 1.0f;
                storedNote = 60;
                reset();
                dirtyFlags = 0;
                updateAll();
            }

            void reset()
            {
                for (int i = 0; i < 4; ++i)
                    x[i] = 0.0f;
            }

            enum Dirty : uint32_t
            {
                changedCutoff = 1 << 0,
                changedResonance = 1 << 1,
                changedKeytrack = 1 << 2,
                changedNote = 1 << 3
            };

            inline void setCutoff(float c)
            {
                baseCutoff = c;
                dirtyFlags |= changedCutoff;
            }

            inline void setResonance(float r)
            {
                resonance = r;
                dirtyFlags |= changedResonance;
            }

            inline void setKeytrack(float kt)
            {
                keytrackAmount = kt;
                dirtyFlags |= changedKeytrack;
            }

            inline void setNoteNumber(int n)
            {
                storedNote = n;
                dirtyFlags |= changedNote;
            }

            inline void applyChangesIfNeeded()
            {
                if (dirtyFlags != 0)
                    updateAll();
            }

            void processBlock(float* buffer, int numSamples)
            {
                applyChangesIfNeeded();
                for (int i = 0; i < numSamples; ++i)
                    buffer[i] = processSample(buffer[i]);
            }

        private:
            //--------------------------------------------------------------------------------------------
            // The discrete-time system:
            //   X[n+1] = MInv * [ N * X[n] + gB * xIn[n] ]
            //   yOut[n] = C * X[n+1]
            //
            // We fix r=1.0 in the continuous-time system for a "Moog" style.
            // The negative sign in Acont[0][3] is gamma0=-1 for the global feedback path.
            //--------------------------------------------------------------------------------------------
            float processSample(float input)
            {
                float temp[4];
                mulMatVec4(N, x, temp);
                temp[0] += gB[0] * input;
                temp[1] += gB[1] * input;
                temp[2] += gB[2] * input;
                temp[3] += gB[3] * input;

                float newX[4];
                mulMatVec4(MInv, temp, newX);

                float out = 0.0f;
                for (int i = 0; i < 4; ++i)
                    out += C[i] * newX[i];

                for (int i = 0; i < 4; ++i)
                    x[i] = newX[i];

                return out;
            }

            void updateAll()
            {
                float semitones = ((float)storedNote - 60.0f) * keytrackAmount;
                float noteFactor = std::exp2f(0.0833333f * semitones);
                float fc = baseCutoff * noteFactor;
                if (fc < 20.0f) fc = 20.0f;
                float limit = 0.49f * sampleRate;
                if (fc > limit) fc = limit;

                float norm = fc / sampleRate;
                float warped = std::tan(MathConstants<float>::pi * norm);
                g = 2.0f * warped;

                buildContinuousTimeSystem();
                buildDiscreteTimeMatrices();
                invert4x4(M, MInv);

                for (int i = 0; i < 4; ++i)
                    C[i] = Ccont[i];

                dirtyFlags = 0;
            }

            //--------------------------------------------------------------------------------------------
            // Build the continuous-time system. r=1.0, gamma0=-1 => Acont[0][3] = -kf
            //--------------------------------------------------------------------------------------------
            void buildContinuousTimeSystem()
            {
                const float r = 1.0f; // fixed local damping for Moog style
                const float kf = resonance;

                for (int rr = 0; rr < 4; ++rr)
                {
                    for (int cc = 0; cc < 4; ++cc)
                        Acont[rr][cc] = 0.0f;
                }
                for (int i = 0; i < 4; ++i)
                {
                    Bcont[i] = 0.0f;
                    Ccont[i] = 0.0f;
                }

                // x1'(t) = -2*r*x1 - x2 - kf*x4 + in
                Acont[0][0] = -2.0f * r;
                Acont[0][1] = -1.0f;
                Acont[0][2] = 0.0f;
                Acont[0][3] = -kf;

                // x2'(t) = x1
                Acont[1][0] = 1.0f;
                Acont[1][1] = 0.0f;
                Acont[1][2] = 0.0f;
                Acont[1][3] = 0.0f;

                // x3'(t) = -2*r*x3 - x4 + x2
                Acont[2][0] = 0.0f;
                Acont[2][1] = 1.0f;
                Acont[2][2] = -2.0f * r;
                Acont[2][3] = -1.0f;

                // x4'(t) = x3
                Acont[3][0] = 0.0f;
                Acont[3][1] = 0.0f;
                Acont[3][2] = 1.0f;
                Acont[3][3] = 0.0f;

                // B => x1'(t) has +1.0 * x_in(t)
                Bcont[0] = 1.0f;
                Bcont[1] = 0.0f;
                Bcont[2] = 0.0f;
                Bcont[3] = 0.0f;

                // output is x4
                Ccont[0] = 0.0f;
                Ccont[1] = 0.0f;
                Ccont[2] = 0.0f;
                Ccont[3] = 1.0f;
            }

            void buildDiscreteTimeMatrices()
            {
                float gA[4][4];
                for (int rr = 0; rr < 4; ++rr)
                {
                    for (int cc = 0; cc < 4; ++cc)
                        gA[rr][cc] = g * Acont[rr][cc];
                }

                for (int rr = 0; rr < 4; ++rr)
                {
                    for (int cc = 0; cc < 4; ++cc)
                    {
                        float valMinus = ((rr == cc) ? 1.0f : 0.0f) - gA[rr][cc];
                        float valPlus = ((rr == cc) ? 1.0f : 0.0f) + gA[rr][cc];
                        M[rr][cc] = valMinus;
                        N[rr][cc] = valPlus;
                    }
                }

                for (int i = 0; i < 4; ++i)
                    gB[i] = g * Bcont[i];
            }

            static void invert4x4(const float src[4][4], float dst[4][4])
            {
                float tmp[4][8];
                for (int r = 0; r < 4; ++r)
                {
                    for (int c = 0; c < 4; ++c)
                        tmp[r][c] = src[r][c];
                    for (int c = 4; c < 8; ++c)
                        tmp[r][c] = ((c - 4) == r) ? 1.0f : 0.0f;
                }

                for (int c = 0; c < 4; ++c)
                {
                    float pivot = tmp[c][c];
                    if (std::fabs(pivot) < 1.0e-12f)
                        pivot = 1.0e-12f;
                    for (int cc = 0; cc < 8; ++cc)
                        tmp[c][cc] /= pivot;
                    for (int r = 0; r < 4; ++r)
                    {
                        if (r != c)
                        {
                            float factor = tmp[r][c];
                            for (int cc = 0; cc < 8; ++cc)
                                tmp[r][cc] -= factor * tmp[c][cc];
                        }
                    }
                }

                for (int r = 0; r < 4; ++r)
                    for (int c = 0; c < 4; ++c)
                        dst[r][c] = tmp[r][c + 4];
            }

            static void mulMatVec4(const float mat[4][4], const float vec[4], float out[4])
            {
                for (int rr = 0; rr < 4; ++rr)
                {
                    float sum = 0.0f;
                    for (int cc = 0; cc < 4; ++cc)
                        sum += mat[rr][cc] * vec[cc];
                    out[rr] = sum;
                }
            }

            float sampleRate = 44100.0f;
            float baseCutoff = 1000.0f;
            float resonance = 0.0f;
            float keytrackAmount = 1.0f;
            int   storedNote = 60;
            float x[4] = { 0.f, 0.f, 0.f, 0.f };
            float g = 0.0f;
            uint32_t dirtyFlags = 0;

            float Acont[4][4];
            float Bcont[4];
            float Ccont[4];
            float M[4][4], N[4][4], MInv[4][4];
            float gB[4];
            float C[4];
        };

        template <int P>
        void setParameter(double val)
        {
            if (P == 0) // cutoff
            {
                cutoffFrequency = (float)val;
                for (auto& fl : filtersLeft)
                {
                    fl.setCutoff(cutoffFrequency);
                    fl.applyChangesIfNeeded();
                }
                for (auto& fr : filtersRight)
                {
                    fr.setCutoff(cutoffFrequency);
                    fr.applyChangesIfNeeded();
                }
            }
            else if (P == 1) // resonance => global feedback
            {
                resonance = (float)val;
                for (auto& fl : filtersLeft)
                {
                    fl.setResonance(resonance);
                    fl.applyChangesIfNeeded();
                }
                for (auto& fr : filtersRight)
                {
                    fr.setResonance(resonance);
                    fr.applyChangesIfNeeded();
                }
            }
            else if (P == 2) // keytrack
            {
                keytrackAmount = (float)val;
                for (auto& fl : filtersLeft)
                {
                    fl.setKeytrack(keytrackAmount);
                    fl.applyChangesIfNeeded();
                }
                for (auto& fr : filtersRight)
                {
                    fr.setKeytrack(keytrackAmount);
                    fr.applyChangesIfNeeded();
                }
            }
        }

        void createParameters(ParameterDataList& data)
        {
            {
                parameter::data p("Cutoff Frequency", { 20.0, 20000.0, 1.0 });
                registerCallback<0>(p);
                p.setDefaultValue(1000.0f);
                data.add(std::move(p));
            }
            {
                parameter::data p("Resonance", { 0.0, 2.0, 0.01 });
                registerCallback<1>(p);
                p.setDefaultValue(0.0f);
                data.add(std::move(p));
            }
            {
                parameter::data p("Keytrack Amount", { -1.0, 1.0, 0.01 });
                registerCallback<2>(p);
                p.setDefaultValue(0.0f);
                data.add(std::move(p));
            }
            // No damping parameter - r is fixed at 1.0 for Moog
        }

        void setExternalData(const ExternalData& data, int index) {}

        void handleHiseEvent(HiseEvent& e)
        {
            if (e.isNoteOn())
            {
                filtersLeft.get().setNoteNumber(e.getNoteNumber());
                filtersLeft.get().applyChangesIfNeeded();
                filtersRight.get().setNoteNumber(e.getNoteNumber());
                filtersRight.get().applyChangesIfNeeded();
            }
        }

    private:
        PolyData<AudioEffect, NV> filtersLeft;
        PolyData<AudioEffect, NV> filtersRight;
        float cutoffFrequency = 1000.0f;
        float resonance = 0.0f;
        float keytrackAmount = 0.0f;
        float sampleRate = 44100.0f;
    };
}
